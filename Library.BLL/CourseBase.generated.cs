
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Course.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Library.BLL.Validation;
#endregion

namespace Library.BLL
{
	///<summary>
	/// An object representation of the 'Course' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CourseBase : EntityBase, ICourse, IEntityId<CourseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CourseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CourseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CourseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Course> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CourseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CourseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CourseBase"/> instance.
		///</summary>
		public CourseBase()
		{
			this.entityData = new CourseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CourseBase"/> instance.
		///</summary>
		///<param name="_course_Name"></param>
		///<param name="_course_Scope"></param>
		///<param name="_duration"></param>
		///<param name="_durationType_ID"></param>
		///<param name="_is_Deleted"></param>
		///<param name="_createdOn"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedOn"></param>
		///<param name="_updatedBy"></param>
		///<param name="_deletedOn"></param>
		///<param name="_deletedBy"></param>
		public CourseBase(System.String _course_Name, System.Int32 _course_Scope, System.Int32 _duration, 
			System.Int32 _durationType_ID, System.Boolean? _is_Deleted, System.DateTime? _createdOn, System.Int32? _createdBy, 
			System.DateTime? _updatedOn, System.Int32? _updatedBy, System.DateTime? _deletedOn, System.Int32? _deletedBy)
		{
			this.entityData = new CourseEntityData();
			this.backupData = null;

			this.Course_Name = _course_Name;
			this.Course_Scope = _course_Scope;
			this.Duration = _duration;
			this.DurationType_ID = _durationType_ID;
			this.Is_Deleted = _is_Deleted;
			this.CreatedOn = _createdOn;
			this.CreatedBy = _createdBy;
			this.UpdatedOn = _updatedOn;
			this.UpdatedBy = _updatedBy;
			this.DeletedOn = _deletedOn;
			this.DeletedBy = _deletedBy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Course"/> instance.
		///</summary>
		///<param name="_course_Name"></param>
		///<param name="_course_Scope"></param>
		///<param name="_duration"></param>
		///<param name="_durationType_ID"></param>
		///<param name="_is_Deleted"></param>
		///<param name="_createdOn"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedOn"></param>
		///<param name="_updatedBy"></param>
		///<param name="_deletedOn"></param>
		///<param name="_deletedBy"></param>
		public static Course CreateCourse(System.String _course_Name, System.Int32 _course_Scope, System.Int32 _duration, 
			System.Int32 _durationType_ID, System.Boolean? _is_Deleted, System.DateTime? _createdOn, System.Int32? _createdBy, 
			System.DateTime? _updatedOn, System.Int32? _updatedBy, System.DateTime? _deletedOn, System.Int32? _deletedBy)
		{
			Course newCourse = new Course();
			newCourse.Course_Name = _course_Name;
			newCourse.Course_Scope = _course_Scope;
			newCourse.Duration = _duration;
			newCourse.DurationType_ID = _durationType_ID;
			newCourse.Is_Deleted = _is_Deleted;
			newCourse.CreatedOn = _createdOn;
			newCourse.CreatedBy = _createdBy;
			newCourse.UpdatedOn = _updatedOn;
			newCourse.UpdatedBy = _updatedBy;
			newCourse.DeletedOn = _deletedOn;
			newCourse.DeletedBy = _deletedBy;
			return newCourse;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override System.Int32 ID
		{
			get
			{
				return this.entityData.ID; 
			}
			
			set
			{
				if (this.entityData.ID == value)
					return;
				
                OnPropertyChanging("ID");                    
				OnColumnChanging(CourseColumn.ID, this.entityData.ID);
				this.entityData.ID = value;
				this.EntityId.ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.ID, this.entityData.ID);
				OnPropertyChanged("ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Course_Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Course_Name
		{
			get
			{
				return this.entityData.Course_Name; 
			}
			
			set
			{
				if (this.entityData.Course_Name == value)
					return;
				
                OnPropertyChanging("Course_Name");                    
				OnColumnChanging(CourseColumn.Course_Name, this.entityData.Course_Name);
				this.entityData.Course_Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.Course_Name, this.entityData.Course_Name);
				OnPropertyChanged("Course_Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Course_Scope property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Course_Scope
		{
			get
			{
				return this.entityData.Course_Scope; 
			}
			
			set
			{
				if (this.entityData.Course_Scope == value)
					return;
				
                OnPropertyChanging("Course_Scope");                    
				OnColumnChanging(CourseColumn.Course_Scope, this.entityData.Course_Scope);
				this.entityData.Course_Scope = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.Course_Scope, this.entityData.Course_Scope);
				OnPropertyChanged("Course_Scope");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Duration property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Duration
		{
			get
			{
				return this.entityData.Duration; 
			}
			
			set
			{
				if (this.entityData.Duration == value)
					return;
				
                OnPropertyChanging("Duration");                    
				OnColumnChanging(CourseColumn.Duration, this.entityData.Duration);
				this.entityData.Duration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.Duration, this.entityData.Duration);
				OnPropertyChanged("Duration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DurationType_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DurationType_ID
		{
			get
			{
				return this.entityData.DurationType_ID; 
			}
			
			set
			{
				if (this.entityData.DurationType_ID == value)
					return;
				
                OnPropertyChanging("DurationType_ID");                    
				OnColumnChanging(CourseColumn.DurationType_ID, this.entityData.DurationType_ID);
				this.entityData.DurationType_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.DurationType_ID, this.entityData.DurationType_ID);
				OnPropertyChanged("DurationType_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Is_Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Is_Deleted
		{
			get
			{
				return this.entityData.Is_Deleted; 
			}
			
			set
			{
				if (this.entityData.Is_Deleted == value)
					return;
				
                OnPropertyChanging("Is_Deleted");                    
				OnColumnChanging(CourseColumn.Is_Deleted, this.entityData.Is_Deleted);
				this.entityData.Is_Deleted = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.Is_Deleted, this.entityData.Is_Deleted);
				OnPropertyChanged("Is_Deleted");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedOn
		{
			get
			{
				return this.entityData.CreatedOn; 
			}
			
			set
			{
				if (this.entityData.CreatedOn == value)
					return;
				
                OnPropertyChanging("CreatedOn");                    
				OnColumnChanging(CourseColumn.CreatedOn, this.entityData.CreatedOn);
				this.entityData.CreatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.CreatedOn, this.entityData.CreatedOn);
				OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreatedBy
		{
			get
			{
				return this.entityData.CreatedBy; 
			}
			
			set
			{
				if (this.entityData.CreatedBy == value)
					return;
				
                OnPropertyChanging("CreatedBy");                    
				OnColumnChanging(CourseColumn.CreatedBy, this.entityData.CreatedBy);
				this.entityData.CreatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.CreatedBy, this.entityData.CreatedBy);
				OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedOn
		{
			get
			{
				return this.entityData.UpdatedOn; 
			}
			
			set
			{
				if (this.entityData.UpdatedOn == value)
					return;
				
                OnPropertyChanging("UpdatedOn");                    
				OnColumnChanging(CourseColumn.UpdatedOn, this.entityData.UpdatedOn);
				this.entityData.UpdatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.UpdatedOn, this.entityData.UpdatedOn);
				OnPropertyChanged("UpdatedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdatedBy
		{
			get
			{
				return this.entityData.UpdatedBy; 
			}
			
			set
			{
				if (this.entityData.UpdatedBy == value)
					return;
				
                OnPropertyChanging("UpdatedBy");                    
				OnColumnChanging(CourseColumn.UpdatedBy, this.entityData.UpdatedBy);
				this.entityData.UpdatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.UpdatedBy, this.entityData.UpdatedBy);
				OnPropertyChanged("UpdatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedOn
		{
			get
			{
				return this.entityData.DeletedOn; 
			}
			
			set
			{
				if (this.entityData.DeletedOn == value)
					return;
				
                OnPropertyChanging("DeletedOn");                    
				OnColumnChanging(CourseColumn.DeletedOn, this.entityData.DeletedOn);
				this.entityData.DeletedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.DeletedOn, this.entityData.DeletedOn);
				OnPropertyChanged("DeletedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DeletedBy
		{
			get
			{
				return this.entityData.DeletedBy; 
			}
			
			set
			{
				if (this.entityData.DeletedBy == value)
					return;
				
                OnPropertyChanging("DeletedBy");                    
				OnColumnChanging(CourseColumn.DeletedBy, this.entityData.DeletedBy);
				this.entityData.DeletedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CourseColumn.DeletedBy, this.entityData.DeletedBy);
				OnPropertyChanged("DeletedBy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Course_Name", "Course Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Course_Name", "Course Name", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Course"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Course_Name", "Course_Scope", "Duration", "DurationType_ID", "Is_Deleted", "CreatedOn", "CreatedBy", "UpdatedOn", "UpdatedBy", "DeletedOn", "DeletedBy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CourseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Course) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Course>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Course);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Course Entity 
		///</summary>
		protected virtual Course Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Course copy = new Course();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ID = this.ID;
				copy.Course_Name = this.Course_Name;
				copy.Course_Scope = this.Course_Scope;
				copy.Duration = this.Duration;
				copy.DurationType_ID = this.DurationType_ID;
				copy.Is_Deleted = this.Is_Deleted;
				copy.CreatedOn = this.CreatedOn;
				copy.CreatedBy = this.CreatedBy;
				copy.UpdatedOn = this.UpdatedOn;
				copy.UpdatedBy = this.UpdatedBy;
				copy.DeletedOn = this.DeletedOn;
				copy.DeletedBy = this.DeletedBy;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Course Entity 
		///</summary>
		public virtual Course Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Course Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Course DeepCopy()
		{
			return EntityHelper.Clone<Course>(this as Course);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CourseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CourseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CourseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CourseColumn column)
		{
			switch(column)
			{
					case CourseColumn.ID:
					return entityData.ID != _originalData.ID;
					case CourseColumn.Course_Name:
					return entityData.Course_Name != _originalData.Course_Name;
					case CourseColumn.Course_Scope:
					return entityData.Course_Scope != _originalData.Course_Scope;
					case CourseColumn.Duration:
					return entityData.Duration != _originalData.Duration;
					case CourseColumn.DurationType_ID:
					return entityData.DurationType_ID != _originalData.DurationType_ID;
					case CourseColumn.Is_Deleted:
					return entityData.Is_Deleted != _originalData.Is_Deleted;
					case CourseColumn.CreatedOn:
					return entityData.CreatedOn != _originalData.CreatedOn;
					case CourseColumn.CreatedBy:
					return entityData.CreatedBy != _originalData.CreatedBy;
					case CourseColumn.UpdatedOn:
					return entityData.UpdatedOn != _originalData.UpdatedOn;
					case CourseColumn.UpdatedBy:
					return entityData.UpdatedBy != _originalData.UpdatedBy;
					case CourseColumn.DeletedOn:
					return entityData.DeletedOn != _originalData.DeletedOn;
					case CourseColumn.DeletedBy:
					return entityData.DeletedBy != _originalData.DeletedBy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CourseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ID != _originalData.ID;
			result = result || entityData.Course_Name != _originalData.Course_Name;
			result = result || entityData.Course_Scope != _originalData.Course_Scope;
			result = result || entityData.Duration != _originalData.Duration;
			result = result || entityData.DurationType_ID != _originalData.DurationType_ID;
			result = result || entityData.Is_Deleted != _originalData.Is_Deleted;
			result = result || entityData.CreatedOn != _originalData.CreatedOn;
			result = result || entityData.CreatedBy != _originalData.CreatedBy;
			result = result || entityData.UpdatedOn != _originalData.UpdatedOn;
			result = result || entityData.UpdatedBy != _originalData.UpdatedBy;
			result = result || entityData.DeletedOn != _originalData.DeletedOn;
			result = result || entityData.DeletedBy != _originalData.DeletedBy;
			return result;
		}	
		
		///<summary>
		///  Returns a Course Entity with the original data.
		///</summary>
		public Course GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCourse(
				_originalData.Course_Name,
				_originalData.Course_Scope,
				_originalData.Duration,
				_originalData.DurationType_ID,
				_originalData.Is_Deleted,
				_originalData.CreatedOn,
				_originalData.CreatedBy,
				_originalData.UpdatedOn,
				_originalData.UpdatedBy,
				_originalData.DeletedOn,
				_originalData.DeletedBy
				);
				
			return (Course)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CourseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CourseBase)
				return ValueEquals(this, (CourseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CourseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ID.GetHashCode() ^ 
					this.Course_Name.GetHashCode() ^ 
					this.Course_Scope.GetHashCode() ^ 
					this.Duration.GetHashCode() ^ 
					this.DurationType_ID.GetHashCode() ^ 
					((this.Is_Deleted == null) ? string.Empty : this.Is_Deleted.ToString()).GetHashCode() ^ 
					((this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString()).GetHashCode() ^ 
					((this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString()).GetHashCode() ^ 
					((this.UpdatedOn == null) ? string.Empty : this.UpdatedOn.ToString()).GetHashCode() ^ 
					((this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString()).GetHashCode() ^ 
					((this.DeletedOn == null) ? string.Empty : this.DeletedOn.ToString()).GetHashCode() ^ 
					((this.DeletedBy == null) ? string.Empty : this.DeletedBy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CourseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CourseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CourseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CourseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CourseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CourseBase Object1, CourseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ID != Object2.ID)
				equal = false;
			if (Object1.Course_Name != Object2.Course_Name)
				equal = false;
			if (Object1.Course_Scope != Object2.Course_Scope)
				equal = false;
			if (Object1.Duration != Object2.Duration)
				equal = false;
			if (Object1.DurationType_ID != Object2.DurationType_ID)
				equal = false;
			if ( Object1.Is_Deleted != null && Object2.Is_Deleted != null )
			{
				if (Object1.Is_Deleted != Object2.Is_Deleted)
					equal = false;
			}
			else if (Object1.Is_Deleted == null ^ Object2.Is_Deleted == null )
			{
				equal = false;
			}
			if ( Object1.CreatedOn != null && Object2.CreatedOn != null )
			{
				if (Object1.CreatedOn != Object2.CreatedOn)
					equal = false;
			}
			else if (Object1.CreatedOn == null ^ Object2.CreatedOn == null )
			{
				equal = false;
			}
			if ( Object1.CreatedBy != null && Object2.CreatedBy != null )
			{
				if (Object1.CreatedBy != Object2.CreatedBy)
					equal = false;
			}
			else if (Object1.CreatedBy == null ^ Object2.CreatedBy == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedOn != null && Object2.UpdatedOn != null )
			{
				if (Object1.UpdatedOn != Object2.UpdatedOn)
					equal = false;
			}
			else if (Object1.UpdatedOn == null ^ Object2.UpdatedOn == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedBy != null && Object2.UpdatedBy != null )
			{
				if (Object1.UpdatedBy != Object2.UpdatedBy)
					equal = false;
			}
			else if (Object1.UpdatedBy == null ^ Object2.UpdatedBy == null )
			{
				equal = false;
			}
			if ( Object1.DeletedOn != null && Object2.DeletedOn != null )
			{
				if (Object1.DeletedOn != Object2.DeletedOn)
					equal = false;
			}
			else if (Object1.DeletedOn == null ^ Object2.DeletedOn == null )
			{
				equal = false;
			}
			if ( Object1.DeletedBy != null && Object2.DeletedBy != null )
			{
				if (Object1.DeletedBy != Object2.DeletedBy)
					equal = false;
			}
			else if (Object1.DeletedBy == null ^ Object2.DeletedBy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CourseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CourseComparer GetComparer()
        {
            return new CourseComparer();
        }
        */

        // Comparer delegates back to Course
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Course rhs, CourseColumn which)
        {
            switch (which)
            {
            	
            	
            	case CourseColumn.ID:
            		return this.ID.CompareTo(rhs.ID);
            		
            		                 
            	
            	
            	case CourseColumn.Course_Name:
            		return this.Course_Name.CompareTo(rhs.Course_Name);
            		
            		                 
            	
            	
            	case CourseColumn.Course_Scope:
            		return this.Course_Scope.CompareTo(rhs.Course_Scope);
            		
            		                 
            	
            	
            	case CourseColumn.Duration:
            		return this.Duration.CompareTo(rhs.Duration);
            		
            		                 
            	
            	
            	case CourseColumn.DurationType_ID:
            		return this.DurationType_ID.CompareTo(rhs.DurationType_ID);
            		
            		                 
            	
            	
            	case CourseColumn.Is_Deleted:
            		return this.Is_Deleted.Value.CompareTo(rhs.Is_Deleted.Value);
            		
            		                 
            	
            	
            	case CourseColumn.CreatedOn:
            		return this.CreatedOn.Value.CompareTo(rhs.CreatedOn.Value);
            		
            		                 
            	
            	
            	case CourseColumn.CreatedBy:
            		return this.CreatedBy.Value.CompareTo(rhs.CreatedBy.Value);
            		
            		                 
            	
            	
            	case CourseColumn.UpdatedOn:
            		return this.UpdatedOn.Value.CompareTo(rhs.UpdatedOn.Value);
            		
            		                 
            	
            	
            	case CourseColumn.UpdatedBy:
            		return this.UpdatedBy.Value.CompareTo(rhs.UpdatedBy.Value);
            		
            		                 
            	
            	
            	case CourseColumn.DeletedOn:
            		return this.DeletedOn.Value.CompareTo(rhs.DeletedOn.Value);
            		
            		                 
            	
            	
            	case CourseColumn.DeletedBy:
            		return this.DeletedBy.Value.CompareTo(rhs.DeletedBy.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CourseKey> Members
		
		// member variable for the EntityId property
		private CourseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CourseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CourseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Course")
					.Append("|").Append( this.ID.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- ID: {0}{12}- Course_Name: {1}{12}- Course_Scope: {2}{12}- Duration: {3}{12}- DurationType_ID: {4}{12}- Is_Deleted: {5}{12}- CreatedOn: {6}{12}- CreatedBy: {7}{12}- UpdatedOn: {8}{12}- UpdatedBy: {9}{12}- DeletedOn: {10}{12}- DeletedBy: {11}{12}{14}", 
				this.ID,
				this.Course_Name,
				this.Course_Scope,
				this.Duration,
				this.DurationType_ID,
				(this.Is_Deleted == null) ? string.Empty : this.Is_Deleted.ToString(),
				(this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString(),
				(this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString(),
				(this.UpdatedOn == null) ? string.Empty : this.UpdatedOn.ToString(),
				(this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString(),
				(this.DeletedOn == null) ? string.Empty : this.DeletedOn.ToString(),
				(this.DeletedBy == null) ? string.Empty : this.DeletedBy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Course' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CourseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Course"</remarks>
		public System.Int32 ID;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Course_Name : 
		/// </summary>
		public System.String Course_Name = string.Empty;
		
		/// <summary>
		/// Course_Scope : 
		/// </summary>
		public System.Int32 Course_Scope = (int)0;
		
		/// <summary>
		/// Duration : 
		/// </summary>
		public System.Int32 Duration = (int)0;
		
		/// <summary>
		/// DurationType_ID : 
		/// </summary>
		public System.Int32 DurationType_ID = (int)0;
		
		/// <summary>
		/// Is_Deleted : 
		/// </summary>
		public System.Boolean? Is_Deleted = null;
		
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		public System.DateTime? CreatedOn = null;
		
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		public System.Int32? CreatedBy = null;
		
		/// <summary>
		/// UpdatedOn : 
		/// </summary>
		public System.DateTime? UpdatedOn = null;
		
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		public System.Int32? UpdatedBy = null;
		
		/// <summary>
		/// DeletedOn : 
		/// </summary>
		public System.DateTime? DeletedOn = null;
		
		/// <summary>
		/// DeletedBy : 
		/// </summary>
		public System.Int32? DeletedBy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CourseEntityData _tmp = new CourseEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.Course_Name = this.Course_Name;
			_tmp.Course_Scope = this.Course_Scope;
			_tmp.Duration = this.Duration;
			_tmp.DurationType_ID = this.DurationType_ID;
			_tmp.Is_Deleted = this.Is_Deleted;
			_tmp.CreatedOn = this.CreatedOn;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedOn = this.UpdatedOn;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.DeletedOn = this.DeletedOn;
			_tmp.DeletedBy = this.DeletedBy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CourseEntityData _tmp = new CourseEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.Course_Name = this.Course_Name;
			_tmp.Course_Scope = this.Course_Scope;
			_tmp.Duration = this.Duration;
			_tmp.DurationType_ID = this.DurationType_ID;
			_tmp.Is_Deleted = this.Is_Deleted;
			_tmp.CreatedOn = this.CreatedOn;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedOn = this.UpdatedOn;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.DeletedOn = this.DeletedOn;
			_tmp.DeletedBy = this.DeletedBy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CourseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CourseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CourseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				CourseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CourseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CourseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CourseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CourseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CourseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Course"/> object.
	/// </remarks>
	public class CourseEventArgs : System.EventArgs
	{
		private CourseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CourseEventArgs class.
		///</summary>
		public CourseEventArgs(CourseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CourseEventArgs class.
		///</summary>
		public CourseEventArgs(CourseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CourseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CourseColumn" />
		public CourseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Course related events.
	///</summary>
	public delegate void CourseEventHandler(object sender, CourseEventArgs e);
	
	#region CourseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CourseComparer : System.Collections.Generic.IComparer<Course>
	{
		CourseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CourseComparer"/> class.
        /// </summary>
		public CourseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CourseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CourseComparer(CourseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Course"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Course"/> to compare.</param>
        /// <param name="b">The second <c>Course</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Course a, Course b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Course entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Course a, Course b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CourseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CourseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Course"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CourseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CourseKey class.
		/// </summary>
		public CourseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CourseKey class.
		/// </summary>
		public CourseKey(CourseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ID = entity.ID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CourseKey class.
		/// </summary>
		public CourseKey(System.Int32 _iD)
		{
			#region Init Properties

			this.ID = _iD;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CourseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CourseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ID property
		private System.Int32 _iD;
		
		/// <summary>
		/// Gets or sets the ID property.
		/// </summary>
		public System.Int32 ID
		{
			get { return _iD; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ID = value;
				
				_iD = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ID = ( values["ID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ID", ID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ID: {0}{1}",
								ID,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CourseColumn Enum
	
	/// <summary>
	/// Enumerate the Course columns.
	/// </summary>
	[Serializable]
	public enum CourseColumn : int
	{
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ID = 1,
		/// <summary>
		/// Course_Name : 
		/// </summary>
		[EnumTextValue("Course Name")]
		[ColumnEnum("Course_Name", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Course_Name = 2,
		/// <summary>
		/// Course_Scope : 
		/// </summary>
		[EnumTextValue("Course Scope")]
		[ColumnEnum("Course_Scope", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Course_Scope = 3,
		/// <summary>
		/// Duration : 
		/// </summary>
		[EnumTextValue("Duration")]
		[ColumnEnum("Duration", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Duration = 4,
		/// <summary>
		/// DurationType_ID : 
		/// </summary>
		[EnumTextValue("Duration TypeID")]
		[ColumnEnum("DurationType_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DurationType_ID = 5,
		/// <summary>
		/// Is_Deleted : 
		/// </summary>
		[EnumTextValue("Is Deleted")]
		[ColumnEnum("Is_Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Is_Deleted = 6,
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		[EnumTextValue("Created On")]
		[ColumnEnum("CreatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedOn = 7,
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		[EnumTextValue("Created By")]
		[ColumnEnum("CreatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreatedBy = 8,
		/// <summary>
		/// UpdatedOn : 
		/// </summary>
		[EnumTextValue("Updated On")]
		[ColumnEnum("UpdatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedOn = 9,
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		[EnumTextValue("Updated By")]
		[ColumnEnum("UpdatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdatedBy = 10,
		/// <summary>
		/// DeletedOn : 
		/// </summary>
		[EnumTextValue("Deleted On")]
		[ColumnEnum("DeletedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedOn = 11,
		/// <summary>
		/// DeletedBy : 
		/// </summary>
		[EnumTextValue("Deleted By")]
		[ColumnEnum("DeletedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DeletedBy = 12
	}//End enum

	#endregion CourseColumn Enum

} // end namespace
