
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Book.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Library.BLL.Validation;
#endregion

namespace Library.BLL
{
	///<summary>
	/// An object representation of the 'Book' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class BookBase : EntityBase, IBook, IEntityId<BookKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private BookEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private BookEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private BookEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Book> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BookEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BookEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="BookBase"/> instance.
		///</summary>
		public BookBase()
		{
			this.entityData = new BookEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="BookBase"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_publisher"></param>
		///<param name="_publish_Date"></param>
		///<param name="_isAvailablePdf"></param>
		///<param name="_isAvailablePaper"></param>
		///<param name="_isBorrowed"></param>
		///<param name="_user_ID"></param>
		///<param name="_borrowDate"></param>
		///<param name="_borrow_Times"></param>
		///<param name="_isLost"></param>
		///<param name="_type_ID"></param>
		///<param name="_publisher_ID"></param>
		///<param name="_papers_no"></param>
		///<param name="_introducer_ID"></param>
		///<param name="_employeeI_D"></param>
		///<param name="_size"></param>
		///<param name="_price"></param>
		///<param name="_pdf_Link"></param>
		///<param name="_image_ID"></param>
		///<param name="_iSBN"></param>
		///<param name="_createdOn"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedOn"></param>
		///<param name="_updatedBy"></param>
		///<param name="_deletedOn"></param>
		///<param name="_deletedBy"></param>
		public BookBase(System.String _name, System.String _publisher, System.DateTime? _publish_Date, 
			System.Boolean? _isAvailablePdf, System.Boolean? _isAvailablePaper, System.Boolean _isBorrowed, System.Int32 _user_ID, 
			System.DateTime? _borrowDate, System.Int32? _borrow_Times, System.Boolean? _isLost, System.Int32 _type_ID, 
			System.Int32 _publisher_ID, System.Int32? _papers_no, System.Int32? _introducer_ID, System.Int32 _employeeI_D, 
			System.Double? _size, System.Int32? _price, System.String _pdf_Link, System.Int32 _image_ID, System.String _iSBN, 
			System.DateTime? _createdOn, System.Int32? _createdBy, System.DateTime? _updatedOn, System.Int32? _updatedBy, 
			System.DateTime? _deletedOn, System.Int32? _deletedBy)
		{
			this.entityData = new BookEntityData();
			this.backupData = null;

			this.Name = _name;
			this.Publisher = _publisher;
			this.Publish_Date = _publish_Date;
			this.IsAvailablePdf = _isAvailablePdf;
			this.IsAvailablePaper = _isAvailablePaper;
			this.IsBorrowed = _isBorrowed;
			this.User_ID = _user_ID;
			this.BorrowDate = _borrowDate;
			this.Borrow_Times = _borrow_Times;
			this.IsLost = _isLost;
			this.Type_ID = _type_ID;
			this.Publisher_ID = _publisher_ID;
			this.Papers_no = _papers_no;
			this.Introducer_ID = _introducer_ID;
			this.EmployeeI_D = _employeeI_D;
			this.Size = _size;
			this.Price = _price;
			this.Pdf_Link = _pdf_Link;
			this.Image_ID = _image_ID;
			this.ISBN = _iSBN;
			this.CreatedOn = _createdOn;
			this.CreatedBy = _createdBy;
			this.UpdatedOn = _updatedOn;
			this.UpdatedBy = _updatedBy;
			this.DeletedOn = _deletedOn;
			this.DeletedBy = _deletedBy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Book"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_publisher"></param>
		///<param name="_publish_Date"></param>
		///<param name="_isAvailablePdf"></param>
		///<param name="_isAvailablePaper"></param>
		///<param name="_isBorrowed"></param>
		///<param name="_user_ID"></param>
		///<param name="_borrowDate"></param>
		///<param name="_borrow_Times"></param>
		///<param name="_isLost"></param>
		///<param name="_type_ID"></param>
		///<param name="_publisher_ID"></param>
		///<param name="_papers_no"></param>
		///<param name="_introducer_ID"></param>
		///<param name="_employeeI_D"></param>
		///<param name="_size"></param>
		///<param name="_price"></param>
		///<param name="_pdf_Link"></param>
		///<param name="_image_ID"></param>
		///<param name="_iSBN"></param>
		///<param name="_createdOn"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedOn"></param>
		///<param name="_updatedBy"></param>
		///<param name="_deletedOn"></param>
		///<param name="_deletedBy"></param>
		public static Book CreateBook(System.String _name, System.String _publisher, System.DateTime? _publish_Date, 
			System.Boolean? _isAvailablePdf, System.Boolean? _isAvailablePaper, System.Boolean _isBorrowed, System.Int32 _user_ID, 
			System.DateTime? _borrowDate, System.Int32? _borrow_Times, System.Boolean? _isLost, System.Int32 _type_ID, 
			System.Int32 _publisher_ID, System.Int32? _papers_no, System.Int32? _introducer_ID, System.Int32 _employeeI_D, 
			System.Double? _size, System.Int32? _price, System.String _pdf_Link, System.Int32 _image_ID, System.String _iSBN, 
			System.DateTime? _createdOn, System.Int32? _createdBy, System.DateTime? _updatedOn, System.Int32? _updatedBy, 
			System.DateTime? _deletedOn, System.Int32? _deletedBy)
		{
			Book newBook = new Book();
			newBook.Name = _name;
			newBook.Publisher = _publisher;
			newBook.Publish_Date = _publish_Date;
			newBook.IsAvailablePdf = _isAvailablePdf;
			newBook.IsAvailablePaper = _isAvailablePaper;
			newBook.IsBorrowed = _isBorrowed;
			newBook.User_ID = _user_ID;
			newBook.BorrowDate = _borrowDate;
			newBook.Borrow_Times = _borrow_Times;
			newBook.IsLost = _isLost;
			newBook.Type_ID = _type_ID;
			newBook.Publisher_ID = _publisher_ID;
			newBook.Papers_no = _papers_no;
			newBook.Introducer_ID = _introducer_ID;
			newBook.EmployeeI_D = _employeeI_D;
			newBook.Size = _size;
			newBook.Price = _price;
			newBook.Pdf_Link = _pdf_Link;
			newBook.Image_ID = _image_ID;
			newBook.ISBN = _iSBN;
			newBook.CreatedOn = _createdOn;
			newBook.CreatedBy = _createdBy;
			newBook.UpdatedOn = _updatedOn;
			newBook.UpdatedBy = _updatedBy;
			newBook.DeletedOn = _deletedOn;
			newBook.DeletedBy = _deletedBy;
			return newBook;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override System.Int32 ID
		{
			get
			{
				return this.entityData.ID; 
			}
			
			set
			{
				if (this.entityData.ID == value)
					return;
				
                OnPropertyChanging("ID");                    
				OnColumnChanging(BookColumn.ID, this.entityData.ID);
				this.entityData.ID = value;
				this.EntityId.ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.ID, this.entityData.ID);
				OnPropertyChanged("ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(BookColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Publisher property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Publisher
		{
			get
			{
				return this.entityData.Publisher; 
			}
			
			set
			{
				if (this.entityData.Publisher == value)
					return;
				
                OnPropertyChanging("Publisher");                    
				OnColumnChanging(BookColumn.Publisher, this.entityData.Publisher);
				this.entityData.Publisher = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Publisher, this.entityData.Publisher);
				OnPropertyChanged("Publisher");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Publish_Date property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Publish_Date
		{
			get
			{
				return this.entityData.Publish_Date; 
			}
			
			set
			{
				if (this.entityData.Publish_Date == value)
					return;
				
                OnPropertyChanging("Publish_Date");                    
				OnColumnChanging(BookColumn.Publish_Date, this.entityData.Publish_Date);
				this.entityData.Publish_Date = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Publish_Date, this.entityData.Publish_Date);
				OnPropertyChanged("Publish_Date");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsAvailablePdf property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsAvailablePdf
		{
			get
			{
				return this.entityData.IsAvailablePdf; 
			}
			
			set
			{
				if (this.entityData.IsAvailablePdf == value)
					return;
				
                OnPropertyChanging("IsAvailablePdf");                    
				OnColumnChanging(BookColumn.IsAvailablePdf, this.entityData.IsAvailablePdf);
				this.entityData.IsAvailablePdf = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.IsAvailablePdf, this.entityData.IsAvailablePdf);
				OnPropertyChanged("IsAvailablePdf");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsAvailablePaper property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsAvailablePaper
		{
			get
			{
				return this.entityData.IsAvailablePaper; 
			}
			
			set
			{
				if (this.entityData.IsAvailablePaper == value)
					return;
				
                OnPropertyChanging("IsAvailablePaper");                    
				OnColumnChanging(BookColumn.IsAvailablePaper, this.entityData.IsAvailablePaper);
				this.entityData.IsAvailablePaper = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.IsAvailablePaper, this.entityData.IsAvailablePaper);
				OnPropertyChanged("IsAvailablePaper");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsBorrowed property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsBorrowed
		{
			get
			{
				return this.entityData.IsBorrowed; 
			}
			
			set
			{
				if (this.entityData.IsBorrowed == value)
					return;
				
                OnPropertyChanging("IsBorrowed");                    
				OnColumnChanging(BookColumn.IsBorrowed, this.entityData.IsBorrowed);
				this.entityData.IsBorrowed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.IsBorrowed, this.entityData.IsBorrowed);
				OnPropertyChanged("IsBorrowed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the User_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 User_ID
		{
			get
			{
				return this.entityData.User_ID; 
			}
			
			set
			{
				if (this.entityData.User_ID == value)
					return;
				
                OnPropertyChanging("User_ID");                    
				OnColumnChanging(BookColumn.User_ID, this.entityData.User_ID);
				this.entityData.User_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.User_ID, this.entityData.User_ID);
				OnPropertyChanged("User_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BorrowDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BorrowDate
		{
			get
			{
				return this.entityData.BorrowDate; 
			}
			
			set
			{
				if (this.entityData.BorrowDate == value)
					return;
				
                OnPropertyChanging("BorrowDate");                    
				OnColumnChanging(BookColumn.BorrowDate, this.entityData.BorrowDate);
				this.entityData.BorrowDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.BorrowDate, this.entityData.BorrowDate);
				OnPropertyChanged("BorrowDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Borrow_Times property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Borrow_Times
		{
			get
			{
				return this.entityData.Borrow_Times; 
			}
			
			set
			{
				if (this.entityData.Borrow_Times == value)
					return;
				
                OnPropertyChanging("Borrow_Times");                    
				OnColumnChanging(BookColumn.Borrow_Times, this.entityData.Borrow_Times);
				this.entityData.Borrow_Times = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Borrow_Times, this.entityData.Borrow_Times);
				OnPropertyChanged("Borrow_Times");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLost property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLost
		{
			get
			{
				return this.entityData.IsLost; 
			}
			
			set
			{
				if (this.entityData.IsLost == value)
					return;
				
                OnPropertyChanging("IsLost");                    
				OnColumnChanging(BookColumn.IsLost, this.entityData.IsLost);
				this.entityData.IsLost = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.IsLost, this.entityData.IsLost);
				OnPropertyChanged("IsLost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Type_ID
		{
			get
			{
				return this.entityData.Type_ID; 
			}
			
			set
			{
				if (this.entityData.Type_ID == value)
					return;
				
                OnPropertyChanging("Type_ID");                    
				OnColumnChanging(BookColumn.Type_ID, this.entityData.Type_ID);
				this.entityData.Type_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Type_ID, this.entityData.Type_ID);
				OnPropertyChanged("Type_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Publisher_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Publisher_ID
		{
			get
			{
				return this.entityData.Publisher_ID; 
			}
			
			set
			{
				if (this.entityData.Publisher_ID == value)
					return;
				
                OnPropertyChanging("Publisher_ID");                    
				OnColumnChanging(BookColumn.Publisher_ID, this.entityData.Publisher_ID);
				this.entityData.Publisher_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Publisher_ID, this.entityData.Publisher_ID);
				OnPropertyChanged("Publisher_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Papers_no property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Papers_no
		{
			get
			{
				return this.entityData.Papers_no; 
			}
			
			set
			{
				if (this.entityData.Papers_no == value)
					return;
				
                OnPropertyChanging("Papers_no");                    
				OnColumnChanging(BookColumn.Papers_no, this.entityData.Papers_no);
				this.entityData.Papers_no = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Papers_no, this.entityData.Papers_no);
				OnPropertyChanged("Papers_no");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Introducer_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Introducer_ID
		{
			get
			{
				return this.entityData.Introducer_ID; 
			}
			
			set
			{
				if (this.entityData.Introducer_ID == value)
					return;
				
                OnPropertyChanging("Introducer_ID");                    
				OnColumnChanging(BookColumn.Introducer_ID, this.entityData.Introducer_ID);
				this.entityData.Introducer_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Introducer_ID, this.entityData.Introducer_ID);
				OnPropertyChanged("Introducer_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeI_D property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EmployeeI_D
		{
			get
			{
				return this.entityData.EmployeeI_D; 
			}
			
			set
			{
				if (this.entityData.EmployeeI_D == value)
					return;
				
                OnPropertyChanging("EmployeeI_D");                    
				OnColumnChanging(BookColumn.EmployeeI_D, this.entityData.EmployeeI_D);
				this.entityData.EmployeeI_D = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.EmployeeI_D, this.entityData.EmployeeI_D);
				OnPropertyChanged("EmployeeI_D");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Size property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Size
		{
			get
			{
				return this.entityData.Size; 
			}
			
			set
			{
				if (this.entityData.Size == value)
					return;
				
                OnPropertyChanging("Size");                    
				OnColumnChanging(BookColumn.Size, this.entityData.Size);
				this.entityData.Size = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Size, this.entityData.Size);
				OnPropertyChanged("Size");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
				
                OnPropertyChanging("Price");                    
				OnColumnChanging(BookColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pdf_Link property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Pdf_Link
		{
			get
			{
				return this.entityData.Pdf_Link; 
			}
			
			set
			{
				if (this.entityData.Pdf_Link == value)
					return;
				
                OnPropertyChanging("Pdf_Link");                    
				OnColumnChanging(BookColumn.Pdf_Link, this.entityData.Pdf_Link);
				this.entityData.Pdf_Link = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Pdf_Link, this.entityData.Pdf_Link);
				OnPropertyChanged("Pdf_Link");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Image_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Image_ID
		{
			get
			{
				return this.entityData.Image_ID; 
			}
			
			set
			{
				if (this.entityData.Image_ID == value)
					return;
				
                OnPropertyChanging("Image_ID");                    
				OnColumnChanging(BookColumn.Image_ID, this.entityData.Image_ID);
				this.entityData.Image_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.Image_ID, this.entityData.Image_ID);
				OnPropertyChanged("Image_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ISBN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ISBN
		{
			get
			{
				return this.entityData.ISBN; 
			}
			
			set
			{
				if (this.entityData.ISBN == value)
					return;
				
                OnPropertyChanging("ISBN");                    
				OnColumnChanging(BookColumn.ISBN, this.entityData.ISBN);
				this.entityData.ISBN = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.ISBN, this.entityData.ISBN);
				OnPropertyChanged("ISBN");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedOn
		{
			get
			{
				return this.entityData.CreatedOn; 
			}
			
			set
			{
				if (this.entityData.CreatedOn == value)
					return;
				
                OnPropertyChanging("CreatedOn");                    
				OnColumnChanging(BookColumn.CreatedOn, this.entityData.CreatedOn);
				this.entityData.CreatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.CreatedOn, this.entityData.CreatedOn);
				OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreatedBy
		{
			get
			{
				return this.entityData.CreatedBy; 
			}
			
			set
			{
				if (this.entityData.CreatedBy == value)
					return;
				
                OnPropertyChanging("CreatedBy");                    
				OnColumnChanging(BookColumn.CreatedBy, this.entityData.CreatedBy);
				this.entityData.CreatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.CreatedBy, this.entityData.CreatedBy);
				OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedOn
		{
			get
			{
				return this.entityData.UpdatedOn; 
			}
			
			set
			{
				if (this.entityData.UpdatedOn == value)
					return;
				
                OnPropertyChanging("UpdatedOn");                    
				OnColumnChanging(BookColumn.UpdatedOn, this.entityData.UpdatedOn);
				this.entityData.UpdatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.UpdatedOn, this.entityData.UpdatedOn);
				OnPropertyChanged("UpdatedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdatedBy
		{
			get
			{
				return this.entityData.UpdatedBy; 
			}
			
			set
			{
				if (this.entityData.UpdatedBy == value)
					return;
				
                OnPropertyChanging("UpdatedBy");                    
				OnColumnChanging(BookColumn.UpdatedBy, this.entityData.UpdatedBy);
				this.entityData.UpdatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.UpdatedBy, this.entityData.UpdatedBy);
				OnPropertyChanged("UpdatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedOn
		{
			get
			{
				return this.entityData.DeletedOn; 
			}
			
			set
			{
				if (this.entityData.DeletedOn == value)
					return;
				
                OnPropertyChanging("DeletedOn");                    
				OnColumnChanging(BookColumn.DeletedOn, this.entityData.DeletedOn);
				this.entityData.DeletedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.DeletedOn, this.entityData.DeletedOn);
				OnPropertyChanged("DeletedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DeletedBy
		{
			get
			{
				return this.entityData.DeletedBy; 
			}
			
			set
			{
				if (this.entityData.DeletedBy == value)
					return;
				
                OnPropertyChanging("DeletedBy");                    
				OnColumnChanging(BookColumn.DeletedBy, this.entityData.DeletedBy);
				this.entityData.DeletedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BookColumn.DeletedBy, this.entityData.DeletedBy);
				OnPropertyChanged("DeletedBy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="BookType"/>.
		/// </summary>
		/// <value>The source BookType for Type_ID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual BookType Type_IDSource
      	{
            get { return entityData.Type_IDSource; }
            set { entityData.Type_IDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Employee"/>.
		/// </summary>
		/// <value>The source Employee for EmployeeI_D.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Employee EmployeeI_DSource
      	{
            get { return entityData.EmployeeI_DSource; }
            set { entityData.EmployeeI_DSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="BookImage"/>.
		/// </summary>
		/// <value>The source BookImage for Image_ID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual BookImage Image_IDSource
      	{
            get { return entityData.Image_IDSource; }
            set { entityData.Image_IDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Introducer"/>.
		/// </summary>
		/// <value>The source Introducer for Introducer_ID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Introducer Introducer_IDSource
      	{
            get { return entityData.Introducer_IDSource; }
            set { entityData.Introducer_IDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Publisher"/>.
		/// </summary>
		/// <value>The source Publisher for Publisher_ID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Publisher Publisher_IDSource
      	{
            get { return entityData.Publisher_IDSource; }
            set { entityData.Publisher_IDSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a collection of AuthorFromBook_Author objects
		///	which are related to this object through the junction table Book_Author
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Author> Author_IDAuthorCollection_From_Book_Author
		{
			get { return entityData.Author_IDAuthorCollection_From_Book_Author; }
			set { entityData.Author_IDAuthorCollection_From_Book_Author = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Book_Author objects
		///	which are related to this object through the relation FK_Book_Author_Book
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Book_Author> Book_AuthorCollection
		{
			get { return entityData.Book_AuthorCollection; }
			set { entityData.Book_AuthorCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Publisher", "Publisher"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Publisher", "Publisher", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Pdf_Link", "Pdf Link", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ISBN", "ISBN", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Book"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Name", "Publisher", "Publish_Date", "IsAvailablePdf", "IsAvailablePaper", "IsBorrowed", "User_ID", "BorrowDate", "Borrow_Times", "IsLost", "Type_ID", "Publisher_ID", "Papers_no", "Introducer_ID", "EmployeeI_D", "Size", "Price", "Pdf_Link", "Image_ID", "ISBN", "CreatedOn", "CreatedBy", "UpdatedOn", "UpdatedBy", "DeletedOn", "DeletedBy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as BookEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Book) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Book>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Book);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Book Entity 
		///</summary>
		protected virtual Book Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Book copy = new Book();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ID = this.ID;
				copy.Name = this.Name;
				copy.Publisher = this.Publisher;
				copy.Publish_Date = this.Publish_Date;
				copy.IsAvailablePdf = this.IsAvailablePdf;
				copy.IsAvailablePaper = this.IsAvailablePaper;
				copy.IsBorrowed = this.IsBorrowed;
				copy.User_ID = this.User_ID;
				copy.BorrowDate = this.BorrowDate;
				copy.Borrow_Times = this.Borrow_Times;
				copy.IsLost = this.IsLost;
				copy.Type_ID = this.Type_ID;
				copy.Publisher_ID = this.Publisher_ID;
				copy.Papers_no = this.Papers_no;
				copy.Introducer_ID = this.Introducer_ID;
				copy.EmployeeI_D = this.EmployeeI_D;
				copy.Size = this.Size;
				copy.Price = this.Price;
				copy.Pdf_Link = this.Pdf_Link;
				copy.Image_ID = this.Image_ID;
				copy.ISBN = this.ISBN;
				copy.CreatedOn = this.CreatedOn;
				copy.CreatedBy = this.CreatedBy;
				copy.UpdatedOn = this.UpdatedOn;
				copy.UpdatedBy = this.UpdatedBy;
				copy.DeletedOn = this.DeletedOn;
				copy.DeletedBy = this.DeletedBy;
			
			if (this.Type_IDSource != null && existingCopies.Contains(this.Type_IDSource))
				copy.Type_IDSource = existingCopies[this.Type_IDSource] as BookType;
			else
				copy.Type_IDSource = MakeCopyOf(this.Type_IDSource, existingCopies) as BookType;
			if (this.EmployeeI_DSource != null && existingCopies.Contains(this.EmployeeI_DSource))
				copy.EmployeeI_DSource = existingCopies[this.EmployeeI_DSource] as Employee;
			else
				copy.EmployeeI_DSource = MakeCopyOf(this.EmployeeI_DSource, existingCopies) as Employee;
			if (this.Image_IDSource != null && existingCopies.Contains(this.Image_IDSource))
				copy.Image_IDSource = existingCopies[this.Image_IDSource] as BookImage;
			else
				copy.Image_IDSource = MakeCopyOf(this.Image_IDSource, existingCopies) as BookImage;
			if (this.Introducer_IDSource != null && existingCopies.Contains(this.Introducer_IDSource))
				copy.Introducer_IDSource = existingCopies[this.Introducer_IDSource] as Introducer;
			else
				copy.Introducer_IDSource = MakeCopyOf(this.Introducer_IDSource, existingCopies) as Introducer;
			if (this.Publisher_IDSource != null && existingCopies.Contains(this.Publisher_IDSource))
				copy.Publisher_IDSource = existingCopies[this.Publisher_IDSource] as Publisher;
			else
				copy.Publisher_IDSource = MakeCopyOf(this.Publisher_IDSource, existingCopies) as Publisher;
		
			//deep copy nested objects
			copy.Author_IDAuthorCollection_From_Book_Author = (TList<Author>) MakeCopyOf(this.Author_IDAuthorCollection_From_Book_Author, existingCopies); 
			copy.Book_AuthorCollection = (TList<Book_Author>) MakeCopyOf(this.Book_AuthorCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Book Entity 
		///</summary>
		public virtual Book Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Book Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Book DeepCopy()
		{
			return EntityHelper.Clone<Book>(this as Book);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as BookEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new BookEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as BookEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(BookColumn column)
		{
			switch(column)
			{
					case BookColumn.ID:
					return entityData.ID != _originalData.ID;
					case BookColumn.Name:
					return entityData.Name != _originalData.Name;
					case BookColumn.Publisher:
					return entityData.Publisher != _originalData.Publisher;
					case BookColumn.Publish_Date:
					return entityData.Publish_Date != _originalData.Publish_Date;
					case BookColumn.IsAvailablePdf:
					return entityData.IsAvailablePdf != _originalData.IsAvailablePdf;
					case BookColumn.IsAvailablePaper:
					return entityData.IsAvailablePaper != _originalData.IsAvailablePaper;
					case BookColumn.IsBorrowed:
					return entityData.IsBorrowed != _originalData.IsBorrowed;
					case BookColumn.User_ID:
					return entityData.User_ID != _originalData.User_ID;
					case BookColumn.BorrowDate:
					return entityData.BorrowDate != _originalData.BorrowDate;
					case BookColumn.Borrow_Times:
					return entityData.Borrow_Times != _originalData.Borrow_Times;
					case BookColumn.IsLost:
					return entityData.IsLost != _originalData.IsLost;
					case BookColumn.Type_ID:
					return entityData.Type_ID != _originalData.Type_ID;
					case BookColumn.Publisher_ID:
					return entityData.Publisher_ID != _originalData.Publisher_ID;
					case BookColumn.Papers_no:
					return entityData.Papers_no != _originalData.Papers_no;
					case BookColumn.Introducer_ID:
					return entityData.Introducer_ID != _originalData.Introducer_ID;
					case BookColumn.EmployeeI_D:
					return entityData.EmployeeI_D != _originalData.EmployeeI_D;
					case BookColumn.Size:
					return entityData.Size != _originalData.Size;
					case BookColumn.Price:
					return entityData.Price != _originalData.Price;
					case BookColumn.Pdf_Link:
					return entityData.Pdf_Link != _originalData.Pdf_Link;
					case BookColumn.Image_ID:
					return entityData.Image_ID != _originalData.Image_ID;
					case BookColumn.ISBN:
					return entityData.ISBN != _originalData.ISBN;
					case BookColumn.CreatedOn:
					return entityData.CreatedOn != _originalData.CreatedOn;
					case BookColumn.CreatedBy:
					return entityData.CreatedBy != _originalData.CreatedBy;
					case BookColumn.UpdatedOn:
					return entityData.UpdatedOn != _originalData.UpdatedOn;
					case BookColumn.UpdatedBy:
					return entityData.UpdatedBy != _originalData.UpdatedBy;
					case BookColumn.DeletedOn:
					return entityData.DeletedOn != _originalData.DeletedOn;
					case BookColumn.DeletedBy:
					return entityData.DeletedBy != _originalData.DeletedBy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< BookColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ID != _originalData.ID;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Publisher != _originalData.Publisher;
			result = result || entityData.Publish_Date != _originalData.Publish_Date;
			result = result || entityData.IsAvailablePdf != _originalData.IsAvailablePdf;
			result = result || entityData.IsAvailablePaper != _originalData.IsAvailablePaper;
			result = result || entityData.IsBorrowed != _originalData.IsBorrowed;
			result = result || entityData.User_ID != _originalData.User_ID;
			result = result || entityData.BorrowDate != _originalData.BorrowDate;
			result = result || entityData.Borrow_Times != _originalData.Borrow_Times;
			result = result || entityData.IsLost != _originalData.IsLost;
			result = result || entityData.Type_ID != _originalData.Type_ID;
			result = result || entityData.Publisher_ID != _originalData.Publisher_ID;
			result = result || entityData.Papers_no != _originalData.Papers_no;
			result = result || entityData.Introducer_ID != _originalData.Introducer_ID;
			result = result || entityData.EmployeeI_D != _originalData.EmployeeI_D;
			result = result || entityData.Size != _originalData.Size;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.Pdf_Link != _originalData.Pdf_Link;
			result = result || entityData.Image_ID != _originalData.Image_ID;
			result = result || entityData.ISBN != _originalData.ISBN;
			result = result || entityData.CreatedOn != _originalData.CreatedOn;
			result = result || entityData.CreatedBy != _originalData.CreatedBy;
			result = result || entityData.UpdatedOn != _originalData.UpdatedOn;
			result = result || entityData.UpdatedBy != _originalData.UpdatedBy;
			result = result || entityData.DeletedOn != _originalData.DeletedOn;
			result = result || entityData.DeletedBy != _originalData.DeletedBy;
			return result;
		}	
		
		///<summary>
		///  Returns a Book Entity with the original data.
		///</summary>
		public Book GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateBook(
				_originalData.Name,
				_originalData.Publisher,
				_originalData.Publish_Date,
				_originalData.IsAvailablePdf,
				_originalData.IsAvailablePaper,
				_originalData.IsBorrowed,
				_originalData.User_ID,
				_originalData.BorrowDate,
				_originalData.Borrow_Times,
				_originalData.IsLost,
				_originalData.Type_ID,
				_originalData.Publisher_ID,
				_originalData.Papers_no,
				_originalData.Introducer_ID,
				_originalData.EmployeeI_D,
				_originalData.Size,
				_originalData.Price,
				_originalData.Pdf_Link,
				_originalData.Image_ID,
				_originalData.ISBN,
				_originalData.CreatedOn,
				_originalData.CreatedBy,
				_originalData.UpdatedOn,
				_originalData.UpdatedBy,
				_originalData.DeletedOn,
				_originalData.DeletedBy
				);
				
			return (Book)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="BookBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is BookBase)
				return ValueEquals(this, (BookBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="BookBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ID.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.Publisher.GetHashCode() ^ 
					((this.Publish_Date == null) ? string.Empty : this.Publish_Date.ToString()).GetHashCode() ^ 
					((this.IsAvailablePdf == null) ? string.Empty : this.IsAvailablePdf.ToString()).GetHashCode() ^ 
					((this.IsAvailablePaper == null) ? string.Empty : this.IsAvailablePaper.ToString()).GetHashCode() ^ 
					this.IsBorrowed.GetHashCode() ^ 
					this.User_ID.GetHashCode() ^ 
					((this.BorrowDate == null) ? string.Empty : this.BorrowDate.ToString()).GetHashCode() ^ 
					((this.Borrow_Times == null) ? string.Empty : this.Borrow_Times.ToString()).GetHashCode() ^ 
					((this.IsLost == null) ? string.Empty : this.IsLost.ToString()).GetHashCode() ^ 
					this.Type_ID.GetHashCode() ^ 
					this.Publisher_ID.GetHashCode() ^ 
					((this.Papers_no == null) ? string.Empty : this.Papers_no.ToString()).GetHashCode() ^ 
					((this.Introducer_ID == null) ? string.Empty : this.Introducer_ID.ToString()).GetHashCode() ^ 
					this.EmployeeI_D.GetHashCode() ^ 
					((this.Size == null) ? string.Empty : this.Size.ToString()).GetHashCode() ^ 
					((this.Price == null) ? string.Empty : this.Price.ToString()).GetHashCode() ^ 
					((this.Pdf_Link == null) ? string.Empty : this.Pdf_Link.ToString()).GetHashCode() ^ 
					this.Image_ID.GetHashCode() ^ 
					((this.ISBN == null) ? string.Empty : this.ISBN.ToString()).GetHashCode() ^ 
					((this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString()).GetHashCode() ^ 
					((this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString()).GetHashCode() ^ 
					((this.UpdatedOn == null) ? string.Empty : this.UpdatedOn.ToString()).GetHashCode() ^ 
					((this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString()).GetHashCode() ^ 
					((this.DeletedOn == null) ? string.Empty : this.DeletedOn.ToString()).GetHashCode() ^ 
					((this.DeletedBy == null) ? string.Empty : this.DeletedBy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="BookBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(BookBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="BookBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="BookBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="BookBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(BookBase Object1, BookBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ID != Object2.ID)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.Publisher != Object2.Publisher)
				equal = false;
			if ( Object1.Publish_Date != null && Object2.Publish_Date != null )
			{
				if (Object1.Publish_Date != Object2.Publish_Date)
					equal = false;
			}
			else if (Object1.Publish_Date == null ^ Object2.Publish_Date == null )
			{
				equal = false;
			}
			if ( Object1.IsAvailablePdf != null && Object2.IsAvailablePdf != null )
			{
				if (Object1.IsAvailablePdf != Object2.IsAvailablePdf)
					equal = false;
			}
			else if (Object1.IsAvailablePdf == null ^ Object2.IsAvailablePdf == null )
			{
				equal = false;
			}
			if ( Object1.IsAvailablePaper != null && Object2.IsAvailablePaper != null )
			{
				if (Object1.IsAvailablePaper != Object2.IsAvailablePaper)
					equal = false;
			}
			else if (Object1.IsAvailablePaper == null ^ Object2.IsAvailablePaper == null )
			{
				equal = false;
			}
			if (Object1.IsBorrowed != Object2.IsBorrowed)
				equal = false;
			if (Object1.User_ID != Object2.User_ID)
				equal = false;
			if ( Object1.BorrowDate != null && Object2.BorrowDate != null )
			{
				if (Object1.BorrowDate != Object2.BorrowDate)
					equal = false;
			}
			else if (Object1.BorrowDate == null ^ Object2.BorrowDate == null )
			{
				equal = false;
			}
			if ( Object1.Borrow_Times != null && Object2.Borrow_Times != null )
			{
				if (Object1.Borrow_Times != Object2.Borrow_Times)
					equal = false;
			}
			else if (Object1.Borrow_Times == null ^ Object2.Borrow_Times == null )
			{
				equal = false;
			}
			if ( Object1.IsLost != null && Object2.IsLost != null )
			{
				if (Object1.IsLost != Object2.IsLost)
					equal = false;
			}
			else if (Object1.IsLost == null ^ Object2.IsLost == null )
			{
				equal = false;
			}
			if (Object1.Type_ID != Object2.Type_ID)
				equal = false;
			if (Object1.Publisher_ID != Object2.Publisher_ID)
				equal = false;
			if ( Object1.Papers_no != null && Object2.Papers_no != null )
			{
				if (Object1.Papers_no != Object2.Papers_no)
					equal = false;
			}
			else if (Object1.Papers_no == null ^ Object2.Papers_no == null )
			{
				equal = false;
			}
			if ( Object1.Introducer_ID != null && Object2.Introducer_ID != null )
			{
				if (Object1.Introducer_ID != Object2.Introducer_ID)
					equal = false;
			}
			else if (Object1.Introducer_ID == null ^ Object2.Introducer_ID == null )
			{
				equal = false;
			}
			if (Object1.EmployeeI_D != Object2.EmployeeI_D)
				equal = false;
			if ( Object1.Size != null && Object2.Size != null )
			{
				if (Object1.Size != Object2.Size)
					equal = false;
			}
			else if (Object1.Size == null ^ Object2.Size == null )
			{
				equal = false;
			}
			if ( Object1.Price != null && Object2.Price != null )
			{
				if (Object1.Price != Object2.Price)
					equal = false;
			}
			else if (Object1.Price == null ^ Object2.Price == null )
			{
				equal = false;
			}
			if ( Object1.Pdf_Link != null && Object2.Pdf_Link != null )
			{
				if (Object1.Pdf_Link != Object2.Pdf_Link)
					equal = false;
			}
			else if (Object1.Pdf_Link == null ^ Object2.Pdf_Link == null )
			{
				equal = false;
			}
			if (Object1.Image_ID != Object2.Image_ID)
				equal = false;
			if ( Object1.ISBN != null && Object2.ISBN != null )
			{
				if (Object1.ISBN != Object2.ISBN)
					equal = false;
			}
			else if (Object1.ISBN == null ^ Object2.ISBN == null )
			{
				equal = false;
			}
			if ( Object1.CreatedOn != null && Object2.CreatedOn != null )
			{
				if (Object1.CreatedOn != Object2.CreatedOn)
					equal = false;
			}
			else if (Object1.CreatedOn == null ^ Object2.CreatedOn == null )
			{
				equal = false;
			}
			if ( Object1.CreatedBy != null && Object2.CreatedBy != null )
			{
				if (Object1.CreatedBy != Object2.CreatedBy)
					equal = false;
			}
			else if (Object1.CreatedBy == null ^ Object2.CreatedBy == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedOn != null && Object2.UpdatedOn != null )
			{
				if (Object1.UpdatedOn != Object2.UpdatedOn)
					equal = false;
			}
			else if (Object1.UpdatedOn == null ^ Object2.UpdatedOn == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedBy != null && Object2.UpdatedBy != null )
			{
				if (Object1.UpdatedBy != Object2.UpdatedBy)
					equal = false;
			}
			else if (Object1.UpdatedBy == null ^ Object2.UpdatedBy == null )
			{
				equal = false;
			}
			if ( Object1.DeletedOn != null && Object2.DeletedOn != null )
			{
				if (Object1.DeletedOn != Object2.DeletedOn)
					equal = false;
			}
			else if (Object1.DeletedOn == null ^ Object2.DeletedOn == null )
			{
				equal = false;
			}
			if ( Object1.DeletedBy != null && Object2.DeletedBy != null )
			{
				if (Object1.DeletedBy != Object2.DeletedBy)
					equal = false;
			}
			else if (Object1.DeletedBy == null ^ Object2.DeletedBy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((BookBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static BookComparer GetComparer()
        {
            return new BookComparer();
        }
        */

        // Comparer delegates back to Book
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Book rhs, BookColumn which)
        {
            switch (which)
            {
            	
            	
            	case BookColumn.ID:
            		return this.ID.CompareTo(rhs.ID);
            		
            		                 
            	
            	
            	case BookColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case BookColumn.Publisher:
            		return this.Publisher.CompareTo(rhs.Publisher);
            		
            		                 
            	
            	
            	case BookColumn.Publish_Date:
            		return this.Publish_Date.Value.CompareTo(rhs.Publish_Date.Value);
            		
            		                 
            	
            	
            	case BookColumn.IsAvailablePdf:
            		return this.IsAvailablePdf.Value.CompareTo(rhs.IsAvailablePdf.Value);
            		
            		                 
            	
            	
            	case BookColumn.IsAvailablePaper:
            		return this.IsAvailablePaper.Value.CompareTo(rhs.IsAvailablePaper.Value);
            		
            		                 
            	
            	
            	case BookColumn.IsBorrowed:
            		return this.IsBorrowed.CompareTo(rhs.IsBorrowed);
            		
            		                 
            	
            	
            	case BookColumn.User_ID:
            		return this.User_ID.CompareTo(rhs.User_ID);
            		
            		                 
            	
            	
            	case BookColumn.BorrowDate:
            		return this.BorrowDate.Value.CompareTo(rhs.BorrowDate.Value);
            		
            		                 
            	
            	
            	case BookColumn.Borrow_Times:
            		return this.Borrow_Times.Value.CompareTo(rhs.Borrow_Times.Value);
            		
            		                 
            	
            	
            	case BookColumn.IsLost:
            		return this.IsLost.Value.CompareTo(rhs.IsLost.Value);
            		
            		                 
            	
            	
            	case BookColumn.Type_ID:
            		return this.Type_ID.CompareTo(rhs.Type_ID);
            		
            		                 
            	
            	
            	case BookColumn.Publisher_ID:
            		return this.Publisher_ID.CompareTo(rhs.Publisher_ID);
            		
            		                 
            	
            	
            	case BookColumn.Papers_no:
            		return this.Papers_no.Value.CompareTo(rhs.Papers_no.Value);
            		
            		                 
            	
            	
            	case BookColumn.Introducer_ID:
            		return this.Introducer_ID.Value.CompareTo(rhs.Introducer_ID.Value);
            		
            		                 
            	
            	
            	case BookColumn.EmployeeI_D:
            		return this.EmployeeI_D.CompareTo(rhs.EmployeeI_D);
            		
            		                 
            	
            	
            	case BookColumn.Size:
            		return this.Size.Value.CompareTo(rhs.Size.Value);
            		
            		                 
            	
            	
            	case BookColumn.Price:
            		return this.Price.Value.CompareTo(rhs.Price.Value);
            		
            		                 
            	
            	
            	case BookColumn.Pdf_Link:
            		return this.Pdf_Link.CompareTo(rhs.Pdf_Link);
            		
            		                 
            	
            	
            	case BookColumn.Image_ID:
            		return this.Image_ID.CompareTo(rhs.Image_ID);
            		
            		                 
            	
            	
            	case BookColumn.ISBN:
            		return this.ISBN.CompareTo(rhs.ISBN);
            		
            		                 
            	
            	
            	case BookColumn.CreatedOn:
            		return this.CreatedOn.Value.CompareTo(rhs.CreatedOn.Value);
            		
            		                 
            	
            	
            	case BookColumn.CreatedBy:
            		return this.CreatedBy.Value.CompareTo(rhs.CreatedBy.Value);
            		
            		                 
            	
            	
            	case BookColumn.UpdatedOn:
            		return this.UpdatedOn.Value.CompareTo(rhs.UpdatedOn.Value);
            		
            		                 
            	
            	
            	case BookColumn.UpdatedBy:
            		return this.UpdatedBy.Value.CompareTo(rhs.UpdatedBy.Value);
            		
            		                 
            	
            	
            	case BookColumn.DeletedOn:
            		return this.DeletedOn.Value.CompareTo(rhs.DeletedOn.Value);
            		
            		                 
            	
            	
            	case BookColumn.DeletedBy:
            		return this.DeletedBy.Value.CompareTo(rhs.DeletedBy.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<BookKey> Members
		
		// member variable for the EntityId property
		private BookKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual BookKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new BookKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Book")
					.Append("|").Append( this.ID.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- ID: {0}{27}- Name: {1}{27}- Publisher: {2}{27}- Publish_Date: {3}{27}- IsAvailablePdf: {4}{27}- IsAvailablePaper: {5}{27}- IsBorrowed: {6}{27}- User_ID: {7}{27}- BorrowDate: {8}{27}- Borrow_Times: {9}{27}- IsLost: {10}{27}- Type_ID: {11}{27}- Publisher_ID: {12}{27}- Papers_no: {13}{27}- Introducer_ID: {14}{27}- EmployeeI_D: {15}{27}- Size: {16}{27}- Price: {17}{27}- Pdf_Link: {18}{27}- Image_ID: {19}{27}- ISBN: {20}{27}- CreatedOn: {21}{27}- CreatedBy: {22}{27}- UpdatedOn: {23}{27}- UpdatedBy: {24}{27}- DeletedOn: {25}{27}- DeletedBy: {26}{27}{29}", 
				this.ID,
				this.Name,
				this.Publisher,
				(this.Publish_Date == null) ? string.Empty : this.Publish_Date.ToString(),
				(this.IsAvailablePdf == null) ? string.Empty : this.IsAvailablePdf.ToString(),
				(this.IsAvailablePaper == null) ? string.Empty : this.IsAvailablePaper.ToString(),
				this.IsBorrowed,
				this.User_ID,
				(this.BorrowDate == null) ? string.Empty : this.BorrowDate.ToString(),
				(this.Borrow_Times == null) ? string.Empty : this.Borrow_Times.ToString(),
				(this.IsLost == null) ? string.Empty : this.IsLost.ToString(),
				this.Type_ID,
				this.Publisher_ID,
				(this.Papers_no == null) ? string.Empty : this.Papers_no.ToString(),
				(this.Introducer_ID == null) ? string.Empty : this.Introducer_ID.ToString(),
				this.EmployeeI_D,
				(this.Size == null) ? string.Empty : this.Size.ToString(),
				(this.Price == null) ? string.Empty : this.Price.ToString(),
				(this.Pdf_Link == null) ? string.Empty : this.Pdf_Link.ToString(),
				this.Image_ID,
				(this.ISBN == null) ? string.Empty : this.ISBN.ToString(),
				(this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString(),
				(this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString(),
				(this.UpdatedOn == null) ? string.Empty : this.UpdatedOn.ToString(),
				(this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString(),
				(this.DeletedOn == null) ? string.Empty : this.DeletedOn.ToString(),
				(this.DeletedBy == null) ? string.Empty : this.DeletedBy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Book' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class BookEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Book"</remarks>
		public System.Int32 ID;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// Publisher : 
		/// </summary>
		public System.String Publisher = string.Empty;
		
		/// <summary>
		/// Publish_Date : 
		/// </summary>
		public System.DateTime? Publish_Date = null;
		
		/// <summary>
		/// IsAvailablePdf : 
		/// </summary>
		public System.Boolean? IsAvailablePdf = null;
		
		/// <summary>
		/// IsAvailablePaper : 
		/// </summary>
		public System.Boolean? IsAvailablePaper = null;
		
		/// <summary>
		/// IsBorrowed : 
		/// </summary>
		public System.Boolean IsBorrowed = false;
		
		/// <summary>
		/// User_ID : 
		/// </summary>
		public System.Int32 User_ID = (int)0;
		
		/// <summary>
		/// BorrowDate : 
		/// </summary>
		public System.DateTime? BorrowDate = null;
		
		/// <summary>
		/// Borrow_Times : 
		/// </summary>
		public System.Int32? Borrow_Times = null;
		
		/// <summary>
		/// IsLost : 
		/// </summary>
		public System.Boolean? IsLost = null;
		
		/// <summary>
		/// Type_ID : 
		/// </summary>
		public System.Int32 Type_ID = (int)0;
		
		/// <summary>
		/// Publisher_ID : 
		/// </summary>
		public System.Int32 Publisher_ID = (int)0;
		
		/// <summary>
		/// Papers_no : 
		/// </summary>
		public System.Int32? Papers_no = null;
		
		/// <summary>
		/// Introducer_ID : 
		/// </summary>
		public System.Int32? Introducer_ID = null;
		
		/// <summary>
		/// EmployeeI_D : 
		/// </summary>
		public System.Int32 EmployeeI_D = (int)0;
		
		/// <summary>
		/// Size : 
		/// </summary>
		public System.Double? Size = null;
		
		/// <summary>
		/// Price : 
		/// </summary>
		public System.Int32? Price = null;
		
		/// <summary>
		/// Pdf_Link : 
		/// </summary>
		public System.String Pdf_Link = null;
		
		/// <summary>
		/// Image_ID : 
		/// </summary>
		public System.Int32 Image_ID = (int)0;
		
		/// <summary>
		/// ISBN : 
		/// </summary>
		public System.String ISBN = null;
		
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		public System.DateTime? CreatedOn = null;
		
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		public System.Int32? CreatedBy = null;
		
		/// <summary>
		/// UpdatedOn : 
		/// </summary>
		public System.DateTime? UpdatedOn = null;
		
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		public System.Int32? UpdatedBy = null;
		
		/// <summary>
		/// DeletedOn : 
		/// </summary>
		public System.DateTime? DeletedOn = null;
		
		/// <summary>
		/// DeletedBy : 
		/// </summary>
		public System.Int32? DeletedBy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private BookType _type_IDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="BookType"/>.
		/// </summary>
		/// <value>The source BookType for Type_ID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual BookType Type_IDSource
      	{
            get { return this._type_IDSource; }
            set { this._type_IDSource = value; }
      	}
		private Employee _employeeI_DSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Employee"/>.
		/// </summary>
		/// <value>The source Employee for EmployeeI_D.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Employee EmployeeI_DSource
      	{
            get { return this._employeeI_DSource; }
            set { this._employeeI_DSource = value; }
      	}
		private BookImage _image_IDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="BookImage"/>.
		/// </summary>
		/// <value>The source BookImage for Image_ID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual BookImage Image_IDSource
      	{
            get { return this._image_IDSource; }
            set { this._image_IDSource = value; }
      	}
		private Introducer _introducer_IDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Introducer"/>.
		/// </summary>
		/// <value>The source Introducer for Introducer_ID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Introducer Introducer_IDSource
      	{
            get { return this._introducer_IDSource; }
            set { this._introducer_IDSource = value; }
      	}
		private Publisher _publisher_IDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Publisher"/>.
		/// </summary>
		/// <value>The source Publisher for Publisher_ID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Publisher Publisher_IDSource
      	{
            get { return this._publisher_IDSource; }
            set { this._publisher_IDSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region Author_IDAuthorCollection_From_Book_Author
		
		private TList<Author> author_IDAuthorCollection_From_Book_Author;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table author_IDAuthorCollection_From_Book_Author
		/// </summary>
		
		public TList<Author> Author_IDAuthorCollection_From_Book_Author
		{
			get
			{
				if (author_IDAuthorCollection_From_Book_Author == null)
				{
				author_IDAuthorCollection_From_Book_Author = new TList<Author>();
				}
	
				return author_IDAuthorCollection_From_Book_Author;
			}
			set { author_IDAuthorCollection_From_Book_Author = value; }
		}
		
		#endregion 

		#region Book_AuthorCollection
		
		private TList<Book_Author> _book_AuthorBook_ID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _book_AuthorBook_ID
		/// </summary>
		
		public TList<Book_Author> Book_AuthorCollection
		{
			get
			{
				if (_book_AuthorBook_ID == null)
				{
				_book_AuthorBook_ID = new TList<Book_Author>();
				}
	
				return _book_AuthorBook_ID;
			}
			set { _book_AuthorBook_ID = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			BookEntityData _tmp = new BookEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.Name = this.Name;
			_tmp.Publisher = this.Publisher;
			_tmp.Publish_Date = this.Publish_Date;
			_tmp.IsAvailablePdf = this.IsAvailablePdf;
			_tmp.IsAvailablePaper = this.IsAvailablePaper;
			_tmp.IsBorrowed = this.IsBorrowed;
			_tmp.User_ID = this.User_ID;
			_tmp.BorrowDate = this.BorrowDate;
			_tmp.Borrow_Times = this.Borrow_Times;
			_tmp.IsLost = this.IsLost;
			_tmp.Type_ID = this.Type_ID;
			_tmp.Publisher_ID = this.Publisher_ID;
			_tmp.Papers_no = this.Papers_no;
			_tmp.Introducer_ID = this.Introducer_ID;
			_tmp.EmployeeI_D = this.EmployeeI_D;
			_tmp.Size = this.Size;
			_tmp.Price = this.Price;
			_tmp.Pdf_Link = this.Pdf_Link;
			_tmp.Image_ID = this.Image_ID;
			_tmp.ISBN = this.ISBN;
			_tmp.CreatedOn = this.CreatedOn;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedOn = this.UpdatedOn;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.DeletedOn = this.DeletedOn;
			_tmp.DeletedBy = this.DeletedBy;
			
			#region Source Parent Composite Entities
			if (this.Type_IDSource != null)
				_tmp.Type_IDSource = MakeCopyOf(this.Type_IDSource) as BookType;
			if (this.EmployeeI_DSource != null)
				_tmp.EmployeeI_DSource = MakeCopyOf(this.EmployeeI_DSource) as Employee;
			if (this.Image_IDSource != null)
				_tmp.Image_IDSource = MakeCopyOf(this.Image_IDSource) as BookImage;
			if (this.Introducer_IDSource != null)
				_tmp.Introducer_IDSource = MakeCopyOf(this.Introducer_IDSource) as Introducer;
			if (this.Publisher_IDSource != null)
				_tmp.Publisher_IDSource = MakeCopyOf(this.Publisher_IDSource) as Publisher;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.author_IDAuthorCollection_From_Book_Author != null)
				_tmp.Author_IDAuthorCollection_From_Book_Author = (TList<Author>) MakeCopyOf(this.Author_IDAuthorCollection_From_Book_Author); 
			if (this._book_AuthorBook_ID != null)
				_tmp.Book_AuthorCollection = (TList<Book_Author>) MakeCopyOf(this.Book_AuthorCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			BookEntityData _tmp = new BookEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.Name = this.Name;
			_tmp.Publisher = this.Publisher;
			_tmp.Publish_Date = this.Publish_Date;
			_tmp.IsAvailablePdf = this.IsAvailablePdf;
			_tmp.IsAvailablePaper = this.IsAvailablePaper;
			_tmp.IsBorrowed = this.IsBorrowed;
			_tmp.User_ID = this.User_ID;
			_tmp.BorrowDate = this.BorrowDate;
			_tmp.Borrow_Times = this.Borrow_Times;
			_tmp.IsLost = this.IsLost;
			_tmp.Type_ID = this.Type_ID;
			_tmp.Publisher_ID = this.Publisher_ID;
			_tmp.Papers_no = this.Papers_no;
			_tmp.Introducer_ID = this.Introducer_ID;
			_tmp.EmployeeI_D = this.EmployeeI_D;
			_tmp.Size = this.Size;
			_tmp.Price = this.Price;
			_tmp.Pdf_Link = this.Pdf_Link;
			_tmp.Image_ID = this.Image_ID;
			_tmp.ISBN = this.ISBN;
			_tmp.CreatedOn = this.CreatedOn;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedOn = this.UpdatedOn;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.DeletedOn = this.DeletedOn;
			_tmp.DeletedBy = this.DeletedBy;
			
			#region Source Parent Composite Entities
			if (this.Type_IDSource != null && existingCopies.Contains(this.Type_IDSource))
				_tmp.Type_IDSource = existingCopies[this.Type_IDSource] as BookType;
			else
				_tmp.Type_IDSource = MakeCopyOf(this.Type_IDSource, existingCopies) as BookType;
			if (this.EmployeeI_DSource != null && existingCopies.Contains(this.EmployeeI_DSource))
				_tmp.EmployeeI_DSource = existingCopies[this.EmployeeI_DSource] as Employee;
			else
				_tmp.EmployeeI_DSource = MakeCopyOf(this.EmployeeI_DSource, existingCopies) as Employee;
			if (this.Image_IDSource != null && existingCopies.Contains(this.Image_IDSource))
				_tmp.Image_IDSource = existingCopies[this.Image_IDSource] as BookImage;
			else
				_tmp.Image_IDSource = MakeCopyOf(this.Image_IDSource, existingCopies) as BookImage;
			if (this.Introducer_IDSource != null && existingCopies.Contains(this.Introducer_IDSource))
				_tmp.Introducer_IDSource = existingCopies[this.Introducer_IDSource] as Introducer;
			else
				_tmp.Introducer_IDSource = MakeCopyOf(this.Introducer_IDSource, existingCopies) as Introducer;
			if (this.Publisher_IDSource != null && existingCopies.Contains(this.Publisher_IDSource))
				_tmp.Publisher_IDSource = existingCopies[this.Publisher_IDSource] as Publisher;
			else
				_tmp.Publisher_IDSource = MakeCopyOf(this.Publisher_IDSource, existingCopies) as Publisher;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.Author_IDAuthorCollection_From_Book_Author = (TList<Author>) MakeCopyOf(this.Author_IDAuthorCollection_From_Book_Author, existingCopies); 
			_tmp.Book_AuthorCollection = (TList<Book_Author>) MakeCopyOf(this.Book_AuthorCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BookColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(BookColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BookColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(BookColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BookColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(BookColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				BookEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new BookEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BookColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(BookColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				BookEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new BookEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region BookEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Book"/> object.
	/// </remarks>
	public class BookEventArgs : System.EventArgs
	{
		private BookColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the BookEventArgs class.
		///</summary>
		public BookEventArgs(BookColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the BookEventArgs class.
		///</summary>
		public BookEventArgs(BookColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The BookColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="BookColumn" />
		public BookColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Book related events.
	///</summary>
	public delegate void BookEventHandler(object sender, BookEventArgs e);
	
	#region BookComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class BookComparer : System.Collections.Generic.IComparer<Book>
	{
		BookColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:BookComparer"/> class.
        /// </summary>
		public BookComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:BookComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public BookComparer(BookColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Book"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Book"/> to compare.</param>
        /// <param name="b">The second <c>Book</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Book a, Book b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Book entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Book a, Book b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public BookColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region BookKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Book"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class BookKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the BookKey class.
		/// </summary>
		public BookKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the BookKey class.
		/// </summary>
		public BookKey(BookBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ID = entity.ID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the BookKey class.
		/// </summary>
		public BookKey(System.Int32 _iD)
		{
			#region Init Properties

			this.ID = _iD;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private BookBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public BookBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ID property
		private System.Int32 _iD;
		
		/// <summary>
		/// Gets or sets the ID property.
		/// </summary>
		public System.Int32 ID
		{
			get { return _iD; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ID = value;
				
				_iD = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ID = ( values["ID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ID", ID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ID: {0}{1}",
								ID,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region BookColumn Enum
	
	/// <summary>
	/// Enumerate the Book columns.
	/// </summary>
	[Serializable]
	public enum BookColumn : int
	{
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ID = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		Name = 2,
		/// <summary>
		/// Publisher : 
		/// </summary>
		[EnumTextValue("Publisher")]
		[ColumnEnum("Publisher", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Publisher = 3,
		/// <summary>
		/// Publish_Date : 
		/// </summary>
		[EnumTextValue("Publish Date")]
		[ColumnEnum("Publish_Date", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		Publish_Date = 4,
		/// <summary>
		/// IsAvailablePdf : 
		/// </summary>
		[EnumTextValue("Is Available Pdf")]
		[ColumnEnum("IsAvailablePdf", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsAvailablePdf = 5,
		/// <summary>
		/// IsAvailablePaper : 
		/// </summary>
		[EnumTextValue("Is Available Paper")]
		[ColumnEnum("IsAvailablePaper", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsAvailablePaper = 6,
		/// <summary>
		/// IsBorrowed : 
		/// </summary>
		[EnumTextValue("Is Borrowed")]
		[ColumnEnum("IsBorrowed", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsBorrowed = 7,
		/// <summary>
		/// User_ID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("User_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		User_ID = 8,
		/// <summary>
		/// BorrowDate : 
		/// </summary>
		[EnumTextValue("Borrow Date")]
		[ColumnEnum("BorrowDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		BorrowDate = 9,
		/// <summary>
		/// Borrow_Times : 
		/// </summary>
		[EnumTextValue("Borrow Times")]
		[ColumnEnum("Borrow_Times", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Borrow_Times = 10,
		/// <summary>
		/// IsLost : 
		/// </summary>
		[EnumTextValue("Is Lost")]
		[ColumnEnum("IsLost", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLost = 11,
		/// <summary>
		/// Type_ID : 
		/// </summary>
		[EnumTextValue("TypeID")]
		[ColumnEnum("Type_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Type_ID = 12,
		/// <summary>
		/// Publisher_ID : 
		/// </summary>
		[EnumTextValue("PublisherID")]
		[ColumnEnum("Publisher_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Publisher_ID = 13,
		/// <summary>
		/// Papers_no : 
		/// </summary>
		[EnumTextValue("Papersno")]
		[ColumnEnum("Papers_no", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Papers_no = 14,
		/// <summary>
		/// Introducer_ID : 
		/// </summary>
		[EnumTextValue("IntroducerID")]
		[ColumnEnum("Introducer_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Introducer_ID = 15,
		/// <summary>
		/// EmployeeI_D : 
		/// </summary>
		[EnumTextValue("Employee ID")]
		[ColumnEnum("EmployeeI_D", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmployeeI_D = 16,
		/// <summary>
		/// Size : 
		/// </summary>
		[EnumTextValue("Size")]
		[ColumnEnum("Size", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Size = 17,
		/// <summary>
		/// Price : 
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Price = 18,
		/// <summary>
		/// Pdf_Link : 
		/// </summary>
		[EnumTextValue("Pdf Link")]
		[ColumnEnum("Pdf_Link", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Pdf_Link = 19,
		/// <summary>
		/// Image_ID : 
		/// </summary>
		[EnumTextValue("ImageID")]
		[ColumnEnum("Image_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Image_ID = 20,
		/// <summary>
		/// ISBN : 
		/// </summary>
		[EnumTextValue("ISBN")]
		[ColumnEnum("ISBN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ISBN = 21,
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		[EnumTextValue("Created On")]
		[ColumnEnum("CreatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedOn = 22,
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		[EnumTextValue("Created By")]
		[ColumnEnum("CreatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreatedBy = 23,
		/// <summary>
		/// UpdatedOn : 
		/// </summary>
		[EnumTextValue("Updated On")]
		[ColumnEnum("UpdatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedOn = 24,
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		[EnumTextValue("Updated By")]
		[ColumnEnum("UpdatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdatedBy = 25,
		/// <summary>
		/// DeletedOn : 
		/// </summary>
		[EnumTextValue("Deleted On")]
		[ColumnEnum("DeletedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedOn = 26,
		/// <summary>
		/// DeletedBy : 
		/// </summary>
		[EnumTextValue("Deleted By")]
		[ColumnEnum("DeletedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DeletedBy = 27
	}//End enum

	#endregion BookColumn Enum

} // end namespace
