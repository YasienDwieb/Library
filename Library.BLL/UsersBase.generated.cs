
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Users.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Library.BLL.Validation;
#endregion

namespace Library.BLL
{
	///<summary>
	/// An object representation of the 'Users' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class UsersBase : EntityBase, IUsers, IEntityId<UsersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private UsersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private UsersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private UsersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Users> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UsersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UsersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UsersBase"/> instance.
		///</summary>
		public UsersBase()
		{
			this.entityData = new UsersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UsersBase"/> instance.
		///</summary>
		///<param name="_userName"></param>
		///<param name="_password"></param>
		///<param name="_last_Login"></param>
		///<param name="_last_Logout"></param>
		///<param name="_is_Online"></param>
		///<param name="_is_Active"></param>
		///<param name="_is_Admin"></param>
		///<param name="_userType_ID"></param>
		///<param name="_first_Name"></param>
		///<param name="_last_Name"></param>
		///<param name="_email"></param>
		///<param name="_country"></param>
		///<param name="_city"></param>
		///<param name="_address"></param>
		///<param name="_mobile"></param>
		///<param name="_phone"></param>
		///<param name="_postion"></param>
		///<param name="_is_Deleted"></param>
		///<param name="_createdOn"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedOn"></param>
		///<param name="_updatedBy"></param>
		///<param name="_deletedOn"></param>
		///<param name="_deletedBy"></param>
		public UsersBase(System.String _userName, System.String _password, System.DateTime? _last_Login, 
			System.DateTime? _last_Logout, System.Boolean _is_Online, System.Boolean _is_Active, System.Boolean _is_Admin, 
			System.Int32 _userType_ID, System.String _first_Name, System.String _last_Name, System.String _email, 
			System.String _country, System.String _city, System.String _address, System.String _mobile, System.String _phone, 
			System.String _postion, System.Boolean? _is_Deleted, System.DateTime? _createdOn, System.Int32? _createdBy, 
			System.DateTime? _updatedOn, System.Int32? _updatedBy, System.DateTime? _deletedOn, System.Int32? _deletedBy)
		{
			this.entityData = new UsersEntityData();
			this.backupData = null;

			this.UserName = _userName;
			this.Password = _password;
			this.Last_Login = _last_Login;
			this.Last_Logout = _last_Logout;
			this.Is_Online = _is_Online;
			this.Is_Active = _is_Active;
			this.Is_Admin = _is_Admin;
			this.UserType_ID = _userType_ID;
			this.First_Name = _first_Name;
			this.Last_Name = _last_Name;
			this.Email = _email;
			this.Country = _country;
			this.City = _city;
			this.Address = _address;
			this.Mobile = _mobile;
			this.Phone = _phone;
			this.Postion = _postion;
			this.Is_Deleted = _is_Deleted;
			this.CreatedOn = _createdOn;
			this.CreatedBy = _createdBy;
			this.UpdatedOn = _updatedOn;
			this.UpdatedBy = _updatedBy;
			this.DeletedOn = _deletedOn;
			this.DeletedBy = _deletedBy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Users"/> instance.
		///</summary>
		///<param name="_userName"></param>
		///<param name="_password"></param>
		///<param name="_last_Login"></param>
		///<param name="_last_Logout"></param>
		///<param name="_is_Online"></param>
		///<param name="_is_Active"></param>
		///<param name="_is_Admin"></param>
		///<param name="_userType_ID"></param>
		///<param name="_first_Name"></param>
		///<param name="_last_Name"></param>
		///<param name="_email"></param>
		///<param name="_country"></param>
		///<param name="_city"></param>
		///<param name="_address"></param>
		///<param name="_mobile"></param>
		///<param name="_phone"></param>
		///<param name="_postion"></param>
		///<param name="_is_Deleted"></param>
		///<param name="_createdOn"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedOn"></param>
		///<param name="_updatedBy"></param>
		///<param name="_deletedOn"></param>
		///<param name="_deletedBy"></param>
		public static Users CreateUsers(System.String _userName, System.String _password, System.DateTime? _last_Login, 
			System.DateTime? _last_Logout, System.Boolean _is_Online, System.Boolean _is_Active, System.Boolean _is_Admin, 
			System.Int32 _userType_ID, System.String _first_Name, System.String _last_Name, System.String _email, 
			System.String _country, System.String _city, System.String _address, System.String _mobile, System.String _phone, 
			System.String _postion, System.Boolean? _is_Deleted, System.DateTime? _createdOn, System.Int32? _createdBy, 
			System.DateTime? _updatedOn, System.Int32? _updatedBy, System.DateTime? _deletedOn, System.Int32? _deletedBy)
		{
			Users newUsers = new Users();
			newUsers.UserName = _userName;
			newUsers.Password = _password;
			newUsers.Last_Login = _last_Login;
			newUsers.Last_Logout = _last_Logout;
			newUsers.Is_Online = _is_Online;
			newUsers.Is_Active = _is_Active;
			newUsers.Is_Admin = _is_Admin;
			newUsers.UserType_ID = _userType_ID;
			newUsers.First_Name = _first_Name;
			newUsers.Last_Name = _last_Name;
			newUsers.Email = _email;
			newUsers.Country = _country;
			newUsers.City = _city;
			newUsers.Address = _address;
			newUsers.Mobile = _mobile;
			newUsers.Phone = _phone;
			newUsers.Postion = _postion;
			newUsers.Is_Deleted = _is_Deleted;
			newUsers.CreatedOn = _createdOn;
			newUsers.CreatedBy = _createdBy;
			newUsers.UpdatedOn = _updatedOn;
			newUsers.UpdatedBy = _updatedBy;
			newUsers.DeletedOn = _deletedOn;
			newUsers.DeletedBy = _deletedBy;
			return newUsers;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override System.Int32 ID
		{
			get
			{
				return this.entityData.ID; 
			}
			
			set
			{
				if (this.entityData.ID == value)
					return;
				
                OnPropertyChanging("ID");                    
				OnColumnChanging(UsersColumn.ID, this.entityData.ID);
				this.entityData.ID = value;
				this.EntityId.ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.ID, this.entityData.ID);
				OnPropertyChanged("ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
				
                OnPropertyChanging("UserName");                    
				OnColumnChanging(UsersColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
				
                OnPropertyChanging("Password");                    
				OnColumnChanging(UsersColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Last_Login property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Last_Login
		{
			get
			{
				return this.entityData.Last_Login; 
			}
			
			set
			{
				if (this.entityData.Last_Login == value)
					return;
				
                OnPropertyChanging("Last_Login");                    
				OnColumnChanging(UsersColumn.Last_Login, this.entityData.Last_Login);
				this.entityData.Last_Login = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Last_Login, this.entityData.Last_Login);
				OnPropertyChanged("Last_Login");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Last_Logout property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Last_Logout
		{
			get
			{
				return this.entityData.Last_Logout; 
			}
			
			set
			{
				if (this.entityData.Last_Logout == value)
					return;
				
                OnPropertyChanging("Last_Logout");                    
				OnColumnChanging(UsersColumn.Last_Logout, this.entityData.Last_Logout);
				this.entityData.Last_Logout = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Last_Logout, this.entityData.Last_Logout);
				OnPropertyChanged("Last_Logout");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Is_Online property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Is_Online
		{
			get
			{
				return this.entityData.Is_Online; 
			}
			
			set
			{
				if (this.entityData.Is_Online == value)
					return;
				
                OnPropertyChanging("Is_Online");                    
				OnColumnChanging(UsersColumn.Is_Online, this.entityData.Is_Online);
				this.entityData.Is_Online = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Is_Online, this.entityData.Is_Online);
				OnPropertyChanged("Is_Online");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Is_Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Is_Active
		{
			get
			{
				return this.entityData.Is_Active; 
			}
			
			set
			{
				if (this.entityData.Is_Active == value)
					return;
				
                OnPropertyChanging("Is_Active");                    
				OnColumnChanging(UsersColumn.Is_Active, this.entityData.Is_Active);
				this.entityData.Is_Active = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Is_Active, this.entityData.Is_Active);
				OnPropertyChanged("Is_Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Is_Admin property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Is_Admin
		{
			get
			{
				return this.entityData.Is_Admin; 
			}
			
			set
			{
				if (this.entityData.Is_Admin == value)
					return;
				
                OnPropertyChanging("Is_Admin");                    
				OnColumnChanging(UsersColumn.Is_Admin, this.entityData.Is_Admin);
				this.entityData.Is_Admin = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Is_Admin, this.entityData.Is_Admin);
				OnPropertyChanged("Is_Admin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserType_ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UserType_ID
		{
			get
			{
				return this.entityData.UserType_ID; 
			}
			
			set
			{
				if (this.entityData.UserType_ID == value)
					return;
				
                OnPropertyChanging("UserType_ID");                    
				OnColumnChanging(UsersColumn.UserType_ID, this.entityData.UserType_ID);
				this.entityData.UserType_ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.UserType_ID, this.entityData.UserType_ID);
				OnPropertyChanged("UserType_ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the First_Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String First_Name
		{
			get
			{
				return this.entityData.First_Name; 
			}
			
			set
			{
				if (this.entityData.First_Name == value)
					return;
				
                OnPropertyChanging("First_Name");                    
				OnColumnChanging(UsersColumn.First_Name, this.entityData.First_Name);
				this.entityData.First_Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.First_Name, this.entityData.First_Name);
				OnPropertyChanged("First_Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Last_Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Last_Name
		{
			get
			{
				return this.entityData.Last_Name; 
			}
			
			set
			{
				if (this.entityData.Last_Name == value)
					return;
				
                OnPropertyChanging("Last_Name");                    
				OnColumnChanging(UsersColumn.Last_Name, this.entityData.Last_Name);
				this.entityData.Last_Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Last_Name, this.entityData.Last_Name);
				OnPropertyChanged("Last_Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
				
                OnPropertyChanging("Email");                    
				OnColumnChanging(UsersColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
				
                OnPropertyChanging("Country");                    
				OnColumnChanging(UsersColumn.Country, this.entityData.Country);
				this.entityData.Country = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Country, this.entityData.Country);
				OnPropertyChanged("Country");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
				
                OnPropertyChanging("City");                    
				OnColumnChanging(UsersColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(UsersColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mobile property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Mobile
		{
			get
			{
				return this.entityData.Mobile; 
			}
			
			set
			{
				if (this.entityData.Mobile == value)
					return;
				
                OnPropertyChanging("Mobile");                    
				OnColumnChanging(UsersColumn.Mobile, this.entityData.Mobile);
				this.entityData.Mobile = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Mobile, this.entityData.Mobile);
				OnPropertyChanged("Mobile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(UsersColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Postion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Postion
		{
			get
			{
				return this.entityData.Postion; 
			}
			
			set
			{
				if (this.entityData.Postion == value)
					return;
				
                OnPropertyChanging("Postion");                    
				OnColumnChanging(UsersColumn.Postion, this.entityData.Postion);
				this.entityData.Postion = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Postion, this.entityData.Postion);
				OnPropertyChanged("Postion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Is_Deleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Is_Deleted
		{
			get
			{
				return this.entityData.Is_Deleted; 
			}
			
			set
			{
				if (this.entityData.Is_Deleted == value)
					return;
				
                OnPropertyChanging("Is_Deleted");                    
				OnColumnChanging(UsersColumn.Is_Deleted, this.entityData.Is_Deleted);
				this.entityData.Is_Deleted = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Is_Deleted, this.entityData.Is_Deleted);
				OnPropertyChanged("Is_Deleted");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedOn
		{
			get
			{
				return this.entityData.CreatedOn; 
			}
			
			set
			{
				if (this.entityData.CreatedOn == value)
					return;
				
                OnPropertyChanging("CreatedOn");                    
				OnColumnChanging(UsersColumn.CreatedOn, this.entityData.CreatedOn);
				this.entityData.CreatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.CreatedOn, this.entityData.CreatedOn);
				OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CreatedBy
		{
			get
			{
				return this.entityData.CreatedBy; 
			}
			
			set
			{
				if (this.entityData.CreatedBy == value)
					return;
				
                OnPropertyChanging("CreatedBy");                    
				OnColumnChanging(UsersColumn.CreatedBy, this.entityData.CreatedBy);
				this.entityData.CreatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.CreatedBy, this.entityData.CreatedBy);
				OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedOn
		{
			get
			{
				return this.entityData.UpdatedOn; 
			}
			
			set
			{
				if (this.entityData.UpdatedOn == value)
					return;
				
                OnPropertyChanging("UpdatedOn");                    
				OnColumnChanging(UsersColumn.UpdatedOn, this.entityData.UpdatedOn);
				this.entityData.UpdatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.UpdatedOn, this.entityData.UpdatedOn);
				OnPropertyChanged("UpdatedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UpdatedBy
		{
			get
			{
				return this.entityData.UpdatedBy; 
			}
			
			set
			{
				if (this.entityData.UpdatedBy == value)
					return;
				
                OnPropertyChanging("UpdatedBy");                    
				OnColumnChanging(UsersColumn.UpdatedBy, this.entityData.UpdatedBy);
				this.entityData.UpdatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.UpdatedBy, this.entityData.UpdatedBy);
				OnPropertyChanged("UpdatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeletedOn
		{
			get
			{
				return this.entityData.DeletedOn; 
			}
			
			set
			{
				if (this.entityData.DeletedOn == value)
					return;
				
                OnPropertyChanging("DeletedOn");                    
				OnColumnChanging(UsersColumn.DeletedOn, this.entityData.DeletedOn);
				this.entityData.DeletedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.DeletedOn, this.entityData.DeletedOn);
				OnPropertyChanged("DeletedOn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeletedBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DeletedBy
		{
			get
			{
				return this.entityData.DeletedBy; 
			}
			
			set
			{
				if (this.entityData.DeletedBy == value)
					return;
				
                OnPropertyChanging("DeletedBy");                    
				OnColumnChanging(UsersColumn.DeletedBy, this.entityData.DeletedBy);
				this.entityData.DeletedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.DeletedBy, this.entityData.DeletedBy);
				OnPropertyChanged("DeletedBy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="UserType"/>.
		/// </summary>
		/// <value>The source UserType for UserType_ID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual UserType UserType_IDSource
      	{
            get { return entityData.UserType_IDSource; }
            set { entityData.UserType_IDSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Password", "Password"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Password", "Password", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("First_Name", "First Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Last_Name", "Last Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Country", "Country", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("City", "City", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Mobile", "Mobile", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Postion", "Postion", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Users"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "UserName", "Password", "Last_Login", "Last_Logout", "Is_Online", "Is_Active", "Is_Admin", "UserType_ID", "First_Name", "Last_Name", "Email", "Country", "City", "Address", "Mobile", "Phone", "Postion", "Is_Deleted", "CreatedOn", "CreatedBy", "UpdatedOn", "UpdatedBy", "DeletedOn", "DeletedBy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UsersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Users) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Users>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Users);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Users Entity 
		///</summary>
		protected virtual Users Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Users copy = new Users();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ID = this.ID;
				copy.UserName = this.UserName;
				copy.Password = this.Password;
				copy.Last_Login = this.Last_Login;
				copy.Last_Logout = this.Last_Logout;
				copy.Is_Online = this.Is_Online;
				copy.Is_Active = this.Is_Active;
				copy.Is_Admin = this.Is_Admin;
				copy.UserType_ID = this.UserType_ID;
				copy.First_Name = this.First_Name;
				copy.Last_Name = this.Last_Name;
				copy.Email = this.Email;
				copy.Country = this.Country;
				copy.City = this.City;
				copy.Address = this.Address;
				copy.Mobile = this.Mobile;
				copy.Phone = this.Phone;
				copy.Postion = this.Postion;
				copy.Is_Deleted = this.Is_Deleted;
				copy.CreatedOn = this.CreatedOn;
				copy.CreatedBy = this.CreatedBy;
				copy.UpdatedOn = this.UpdatedOn;
				copy.UpdatedBy = this.UpdatedBy;
				copy.DeletedOn = this.DeletedOn;
				copy.DeletedBy = this.DeletedBy;
			
			if (this.UserType_IDSource != null && existingCopies.Contains(this.UserType_IDSource))
				copy.UserType_IDSource = existingCopies[this.UserType_IDSource] as UserType;
			else
				copy.UserType_IDSource = MakeCopyOf(this.UserType_IDSource, existingCopies) as UserType;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Users Entity 
		///</summary>
		public virtual Users Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Users Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Users DeepCopy()
		{
			return EntityHelper.Clone<Users>(this as Users);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as UsersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new UsersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as UsersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(UsersColumn column)
		{
			switch(column)
			{
					case UsersColumn.ID:
					return entityData.ID != _originalData.ID;
					case UsersColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case UsersColumn.Password:
					return entityData.Password != _originalData.Password;
					case UsersColumn.Last_Login:
					return entityData.Last_Login != _originalData.Last_Login;
					case UsersColumn.Last_Logout:
					return entityData.Last_Logout != _originalData.Last_Logout;
					case UsersColumn.Is_Online:
					return entityData.Is_Online != _originalData.Is_Online;
					case UsersColumn.Is_Active:
					return entityData.Is_Active != _originalData.Is_Active;
					case UsersColumn.Is_Admin:
					return entityData.Is_Admin != _originalData.Is_Admin;
					case UsersColumn.UserType_ID:
					return entityData.UserType_ID != _originalData.UserType_ID;
					case UsersColumn.First_Name:
					return entityData.First_Name != _originalData.First_Name;
					case UsersColumn.Last_Name:
					return entityData.Last_Name != _originalData.Last_Name;
					case UsersColumn.Email:
					return entityData.Email != _originalData.Email;
					case UsersColumn.Country:
					return entityData.Country != _originalData.Country;
					case UsersColumn.City:
					return entityData.City != _originalData.City;
					case UsersColumn.Address:
					return entityData.Address != _originalData.Address;
					case UsersColumn.Mobile:
					return entityData.Mobile != _originalData.Mobile;
					case UsersColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case UsersColumn.Postion:
					return entityData.Postion != _originalData.Postion;
					case UsersColumn.Is_Deleted:
					return entityData.Is_Deleted != _originalData.Is_Deleted;
					case UsersColumn.CreatedOn:
					return entityData.CreatedOn != _originalData.CreatedOn;
					case UsersColumn.CreatedBy:
					return entityData.CreatedBy != _originalData.CreatedBy;
					case UsersColumn.UpdatedOn:
					return entityData.UpdatedOn != _originalData.UpdatedOn;
					case UsersColumn.UpdatedBy:
					return entityData.UpdatedBy != _originalData.UpdatedBy;
					case UsersColumn.DeletedOn:
					return entityData.DeletedOn != _originalData.DeletedOn;
					case UsersColumn.DeletedBy:
					return entityData.DeletedBy != _originalData.DeletedBy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< UsersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ID != _originalData.ID;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.Last_Login != _originalData.Last_Login;
			result = result || entityData.Last_Logout != _originalData.Last_Logout;
			result = result || entityData.Is_Online != _originalData.Is_Online;
			result = result || entityData.Is_Active != _originalData.Is_Active;
			result = result || entityData.Is_Admin != _originalData.Is_Admin;
			result = result || entityData.UserType_ID != _originalData.UserType_ID;
			result = result || entityData.First_Name != _originalData.First_Name;
			result = result || entityData.Last_Name != _originalData.Last_Name;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Country != _originalData.Country;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.Mobile != _originalData.Mobile;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Postion != _originalData.Postion;
			result = result || entityData.Is_Deleted != _originalData.Is_Deleted;
			result = result || entityData.CreatedOn != _originalData.CreatedOn;
			result = result || entityData.CreatedBy != _originalData.CreatedBy;
			result = result || entityData.UpdatedOn != _originalData.UpdatedOn;
			result = result || entityData.UpdatedBy != _originalData.UpdatedBy;
			result = result || entityData.DeletedOn != _originalData.DeletedOn;
			result = result || entityData.DeletedBy != _originalData.DeletedBy;
			return result;
		}	
		
		///<summary>
		///  Returns a Users Entity with the original data.
		///</summary>
		public Users GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateUsers(
				_originalData.UserName,
				_originalData.Password,
				_originalData.Last_Login,
				_originalData.Last_Logout,
				_originalData.Is_Online,
				_originalData.Is_Active,
				_originalData.Is_Admin,
				_originalData.UserType_ID,
				_originalData.First_Name,
				_originalData.Last_Name,
				_originalData.Email,
				_originalData.Country,
				_originalData.City,
				_originalData.Address,
				_originalData.Mobile,
				_originalData.Phone,
				_originalData.Postion,
				_originalData.Is_Deleted,
				_originalData.CreatedOn,
				_originalData.CreatedBy,
				_originalData.UpdatedOn,
				_originalData.UpdatedBy,
				_originalData.DeletedOn,
				_originalData.DeletedBy
				);
				
			return (Users)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="UsersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is UsersBase)
				return ValueEquals(this, (UsersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="UsersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ID.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					((this.Last_Login == null) ? string.Empty : this.Last_Login.ToString()).GetHashCode() ^ 
					((this.Last_Logout == null) ? string.Empty : this.Last_Logout.ToString()).GetHashCode() ^ 
					this.Is_Online.GetHashCode() ^ 
					this.Is_Active.GetHashCode() ^ 
					this.Is_Admin.GetHashCode() ^ 
					this.UserType_ID.GetHashCode() ^ 
					((this.First_Name == null) ? string.Empty : this.First_Name.ToString()).GetHashCode() ^ 
					((this.Last_Name == null) ? string.Empty : this.Last_Name.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Country == null) ? string.Empty : this.Country.ToString()).GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.Mobile == null) ? string.Empty : this.Mobile.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Postion == null) ? string.Empty : this.Postion.ToString()).GetHashCode() ^ 
					((this.Is_Deleted == null) ? string.Empty : this.Is_Deleted.ToString()).GetHashCode() ^ 
					((this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString()).GetHashCode() ^ 
					((this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString()).GetHashCode() ^ 
					((this.UpdatedOn == null) ? string.Empty : this.UpdatedOn.ToString()).GetHashCode() ^ 
					((this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString()).GetHashCode() ^ 
					((this.DeletedOn == null) ? string.Empty : this.DeletedOn.ToString()).GetHashCode() ^ 
					((this.DeletedBy == null) ? string.Empty : this.DeletedBy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UsersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UsersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="UsersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="UsersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UsersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(UsersBase Object1, UsersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ID != Object2.ID)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if ( Object1.Last_Login != null && Object2.Last_Login != null )
			{
				if (Object1.Last_Login != Object2.Last_Login)
					equal = false;
			}
			else if (Object1.Last_Login == null ^ Object2.Last_Login == null )
			{
				equal = false;
			}
			if ( Object1.Last_Logout != null && Object2.Last_Logout != null )
			{
				if (Object1.Last_Logout != Object2.Last_Logout)
					equal = false;
			}
			else if (Object1.Last_Logout == null ^ Object2.Last_Logout == null )
			{
				equal = false;
			}
			if (Object1.Is_Online != Object2.Is_Online)
				equal = false;
			if (Object1.Is_Active != Object2.Is_Active)
				equal = false;
			if (Object1.Is_Admin != Object2.Is_Admin)
				equal = false;
			if (Object1.UserType_ID != Object2.UserType_ID)
				equal = false;
			if ( Object1.First_Name != null && Object2.First_Name != null )
			{
				if (Object1.First_Name != Object2.First_Name)
					equal = false;
			}
			else if (Object1.First_Name == null ^ Object2.First_Name == null )
			{
				equal = false;
			}
			if ( Object1.Last_Name != null && Object2.Last_Name != null )
			{
				if (Object1.Last_Name != Object2.Last_Name)
					equal = false;
			}
			else if (Object1.Last_Name == null ^ Object2.Last_Name == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object2.Country == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.Mobile != null && Object2.Mobile != null )
			{
				if (Object1.Mobile != Object2.Mobile)
					equal = false;
			}
			else if (Object1.Mobile == null ^ Object2.Mobile == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Postion != null && Object2.Postion != null )
			{
				if (Object1.Postion != Object2.Postion)
					equal = false;
			}
			else if (Object1.Postion == null ^ Object2.Postion == null )
			{
				equal = false;
			}
			if ( Object1.Is_Deleted != null && Object2.Is_Deleted != null )
			{
				if (Object1.Is_Deleted != Object2.Is_Deleted)
					equal = false;
			}
			else if (Object1.Is_Deleted == null ^ Object2.Is_Deleted == null )
			{
				equal = false;
			}
			if ( Object1.CreatedOn != null && Object2.CreatedOn != null )
			{
				if (Object1.CreatedOn != Object2.CreatedOn)
					equal = false;
			}
			else if (Object1.CreatedOn == null ^ Object2.CreatedOn == null )
			{
				equal = false;
			}
			if ( Object1.CreatedBy != null && Object2.CreatedBy != null )
			{
				if (Object1.CreatedBy != Object2.CreatedBy)
					equal = false;
			}
			else if (Object1.CreatedBy == null ^ Object2.CreatedBy == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedOn != null && Object2.UpdatedOn != null )
			{
				if (Object1.UpdatedOn != Object2.UpdatedOn)
					equal = false;
			}
			else if (Object1.UpdatedOn == null ^ Object2.UpdatedOn == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedBy != null && Object2.UpdatedBy != null )
			{
				if (Object1.UpdatedBy != Object2.UpdatedBy)
					equal = false;
			}
			else if (Object1.UpdatedBy == null ^ Object2.UpdatedBy == null )
			{
				equal = false;
			}
			if ( Object1.DeletedOn != null && Object2.DeletedOn != null )
			{
				if (Object1.DeletedOn != Object2.DeletedOn)
					equal = false;
			}
			else if (Object1.DeletedOn == null ^ Object2.DeletedOn == null )
			{
				equal = false;
			}
			if ( Object1.DeletedBy != null && Object2.DeletedBy != null )
			{
				if (Object1.DeletedBy != Object2.DeletedBy)
					equal = false;
			}
			else if (Object1.DeletedBy == null ^ Object2.DeletedBy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((UsersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static UsersComparer GetComparer()
        {
            return new UsersComparer();
        }
        */

        // Comparer delegates back to Users
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Users rhs, UsersColumn which)
        {
            switch (which)
            {
            	
            	
            	case UsersColumn.ID:
            		return this.ID.CompareTo(rhs.ID);
            		
            		                 
            	
            	
            	case UsersColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case UsersColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case UsersColumn.Last_Login:
            		return this.Last_Login.Value.CompareTo(rhs.Last_Login.Value);
            		
            		                 
            	
            	
            	case UsersColumn.Last_Logout:
            		return this.Last_Logout.Value.CompareTo(rhs.Last_Logout.Value);
            		
            		                 
            	
            	
            	case UsersColumn.Is_Online:
            		return this.Is_Online.CompareTo(rhs.Is_Online);
            		
            		                 
            	
            	
            	case UsersColumn.Is_Active:
            		return this.Is_Active.CompareTo(rhs.Is_Active);
            		
            		                 
            	
            	
            	case UsersColumn.Is_Admin:
            		return this.Is_Admin.CompareTo(rhs.Is_Admin);
            		
            		                 
            	
            	
            	case UsersColumn.UserType_ID:
            		return this.UserType_ID.CompareTo(rhs.UserType_ID);
            		
            		                 
            	
            	
            	case UsersColumn.First_Name:
            		return this.First_Name.CompareTo(rhs.First_Name);
            		
            		                 
            	
            	
            	case UsersColumn.Last_Name:
            		return this.Last_Name.CompareTo(rhs.Last_Name);
            		
            		                 
            	
            	
            	case UsersColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case UsersColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case UsersColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case UsersColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case UsersColumn.Mobile:
            		return this.Mobile.CompareTo(rhs.Mobile);
            		
            		                 
            	
            	
            	case UsersColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case UsersColumn.Postion:
            		return this.Postion.CompareTo(rhs.Postion);
            		
            		                 
            	
            	
            	case UsersColumn.Is_Deleted:
            		return this.Is_Deleted.Value.CompareTo(rhs.Is_Deleted.Value);
            		
            		                 
            	
            	
            	case UsersColumn.CreatedOn:
            		return this.CreatedOn.Value.CompareTo(rhs.CreatedOn.Value);
            		
            		                 
            	
            	
            	case UsersColumn.CreatedBy:
            		return this.CreatedBy.Value.CompareTo(rhs.CreatedBy.Value);
            		
            		                 
            	
            	
            	case UsersColumn.UpdatedOn:
            		return this.UpdatedOn.Value.CompareTo(rhs.UpdatedOn.Value);
            		
            		                 
            	
            	
            	case UsersColumn.UpdatedBy:
            		return this.UpdatedBy.Value.CompareTo(rhs.UpdatedBy.Value);
            		
            		                 
            	
            	
            	case UsersColumn.DeletedOn:
            		return this.DeletedOn.Value.CompareTo(rhs.DeletedOn.Value);
            		
            		                 
            	
            	
            	case UsersColumn.DeletedBy:
            		return this.DeletedBy.Value.CompareTo(rhs.DeletedBy.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UsersKey> Members
		
		// member variable for the EntityId property
		private UsersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual UsersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UsersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Users")
					.Append("|").Append( this.ID.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{26}{25}- ID: {0}{25}- UserName: {1}{25}- Password: {2}{25}- Last_Login: {3}{25}- Last_Logout: {4}{25}- Is_Online: {5}{25}- Is_Active: {6}{25}- Is_Admin: {7}{25}- UserType_ID: {8}{25}- First_Name: {9}{25}- Last_Name: {10}{25}- Email: {11}{25}- Country: {12}{25}- City: {13}{25}- Address: {14}{25}- Mobile: {15}{25}- Phone: {16}{25}- Postion: {17}{25}- Is_Deleted: {18}{25}- CreatedOn: {19}{25}- CreatedBy: {20}{25}- UpdatedOn: {21}{25}- UpdatedBy: {22}{25}- DeletedOn: {23}{25}- DeletedBy: {24}{25}{27}", 
				this.ID,
				this.UserName,
				this.Password,
				(this.Last_Login == null) ? string.Empty : this.Last_Login.ToString(),
				(this.Last_Logout == null) ? string.Empty : this.Last_Logout.ToString(),
				this.Is_Online,
				this.Is_Active,
				this.Is_Admin,
				this.UserType_ID,
				(this.First_Name == null) ? string.Empty : this.First_Name.ToString(),
				(this.Last_Name == null) ? string.Empty : this.Last_Name.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Country == null) ? string.Empty : this.Country.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.Mobile == null) ? string.Empty : this.Mobile.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Postion == null) ? string.Empty : this.Postion.ToString(),
				(this.Is_Deleted == null) ? string.Empty : this.Is_Deleted.ToString(),
				(this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString(),
				(this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString(),
				(this.UpdatedOn == null) ? string.Empty : this.UpdatedOn.ToString(),
				(this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString(),
				(this.DeletedOn == null) ? string.Empty : this.DeletedOn.ToString(),
				(this.DeletedBy == null) ? string.Empty : this.DeletedBy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Users' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class UsersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Users"</remarks>
		public System.Int32 ID;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// UserName : 
		/// </summary>
		public System.String UserName = string.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String Password = string.Empty;
		
		/// <summary>
		/// Last_Login : 
		/// </summary>
		public System.DateTime? Last_Login = null;
		
		/// <summary>
		/// Last_Logout : 
		/// </summary>
		public System.DateTime? Last_Logout = null;
		
		/// <summary>
		/// Is_Online : 
		/// </summary>
		public System.Boolean Is_Online = false;
		
		/// <summary>
		/// Is_Active : 
		/// </summary>
		public System.Boolean Is_Active = false;
		
		/// <summary>
		/// Is_Admin : 
		/// </summary>
		public System.Boolean Is_Admin = false;
		
		/// <summary>
		/// UserType_ID : 
		/// </summary>
		public System.Int32 UserType_ID = (int)0;
		
		/// <summary>
		/// First_Name : 
		/// </summary>
		public System.String First_Name = null;
		
		/// <summary>
		/// Last_Name : 
		/// </summary>
		public System.String Last_Name = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String Email = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public System.String Country = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String City = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// Mobile : 
		/// </summary>
		public System.String Mobile = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String Phone = null;
		
		/// <summary>
		/// Postion : 
		/// </summary>
		public System.String Postion = null;
		
		/// <summary>
		/// Is_Deleted : 
		/// </summary>
		public System.Boolean? Is_Deleted = null;
		
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		public System.DateTime? CreatedOn = null;
		
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		public System.Int32? CreatedBy = null;
		
		/// <summary>
		/// UpdatedOn : 
		/// </summary>
		public System.DateTime? UpdatedOn = null;
		
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		public System.Int32? UpdatedBy = null;
		
		/// <summary>
		/// DeletedOn : 
		/// </summary>
		public System.DateTime? DeletedOn = null;
		
		/// <summary>
		/// DeletedBy : 
		/// </summary>
		public System.Int32? DeletedBy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private UserType _userType_IDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="UserType"/>.
		/// </summary>
		/// <value>The source UserType for UserType_ID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual UserType UserType_IDSource
      	{
            get { return this._userType_IDSource; }
            set { this._userType_IDSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			UsersEntityData _tmp = new UsersEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.UserName = this.UserName;
			_tmp.Password = this.Password;
			_tmp.Last_Login = this.Last_Login;
			_tmp.Last_Logout = this.Last_Logout;
			_tmp.Is_Online = this.Is_Online;
			_tmp.Is_Active = this.Is_Active;
			_tmp.Is_Admin = this.Is_Admin;
			_tmp.UserType_ID = this.UserType_ID;
			_tmp.First_Name = this.First_Name;
			_tmp.Last_Name = this.Last_Name;
			_tmp.Email = this.Email;
			_tmp.Country = this.Country;
			_tmp.City = this.City;
			_tmp.Address = this.Address;
			_tmp.Mobile = this.Mobile;
			_tmp.Phone = this.Phone;
			_tmp.Postion = this.Postion;
			_tmp.Is_Deleted = this.Is_Deleted;
			_tmp.CreatedOn = this.CreatedOn;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedOn = this.UpdatedOn;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.DeletedOn = this.DeletedOn;
			_tmp.DeletedBy = this.DeletedBy;
			
			#region Source Parent Composite Entities
			if (this.UserType_IDSource != null)
				_tmp.UserType_IDSource = MakeCopyOf(this.UserType_IDSource) as UserType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			UsersEntityData _tmp = new UsersEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.UserName = this.UserName;
			_tmp.Password = this.Password;
			_tmp.Last_Login = this.Last_Login;
			_tmp.Last_Logout = this.Last_Logout;
			_tmp.Is_Online = this.Is_Online;
			_tmp.Is_Active = this.Is_Active;
			_tmp.Is_Admin = this.Is_Admin;
			_tmp.UserType_ID = this.UserType_ID;
			_tmp.First_Name = this.First_Name;
			_tmp.Last_Name = this.Last_Name;
			_tmp.Email = this.Email;
			_tmp.Country = this.Country;
			_tmp.City = this.City;
			_tmp.Address = this.Address;
			_tmp.Mobile = this.Mobile;
			_tmp.Phone = this.Phone;
			_tmp.Postion = this.Postion;
			_tmp.Is_Deleted = this.Is_Deleted;
			_tmp.CreatedOn = this.CreatedOn;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedOn = this.UpdatedOn;
			_tmp.UpdatedBy = this.UpdatedBy;
			_tmp.DeletedOn = this.DeletedOn;
			_tmp.DeletedBy = this.DeletedBy;
			
			#region Source Parent Composite Entities
			if (this.UserType_IDSource != null && existingCopies.Contains(this.UserType_IDSource))
				_tmp.UserType_IDSource = existingCopies[this.UserType_IDSource] as UserType;
			else
				_tmp.UserType_IDSource = MakeCopyOf(this.UserType_IDSource, existingCopies) as UserType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(UsersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(UsersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(UsersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				UsersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UsersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(UsersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UsersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UsersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region UsersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Users"/> object.
	/// </remarks>
	public class UsersEventArgs : System.EventArgs
	{
		private UsersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the UsersEventArgs class.
		///</summary>
		public UsersEventArgs(UsersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UsersEventArgs class.
		///</summary>
		public UsersEventArgs(UsersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The UsersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UsersColumn" />
		public UsersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Users related events.
	///</summary>
	public delegate void UsersEventHandler(object sender, UsersEventArgs e);
	
	#region UsersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UsersComparer : System.Collections.Generic.IComparer<Users>
	{
		UsersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UsersComparer"/> class.
        /// </summary>
		public UsersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:UsersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UsersComparer(UsersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Users"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Users"/> to compare.</param>
        /// <param name="b">The second <c>Users</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Users a, Users b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Users entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Users a, Users b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UsersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UsersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Users"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UsersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UsersKey class.
		/// </summary>
		public UsersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UsersKey class.
		/// </summary>
		public UsersKey(UsersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ID = entity.ID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UsersKey class.
		/// </summary>
		public UsersKey(System.Int32 _iD)
		{
			#region Init Properties

			this.ID = _iD;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UsersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UsersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ID property
		private System.Int32 _iD;
		
		/// <summary>
		/// Gets or sets the ID property.
		/// </summary>
		public System.Int32 ID
		{
			get { return _iD; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ID = value;
				
				_iD = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ID = ( values["ID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ID", ID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ID: {0}{1}",
								ID,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UsersColumn Enum
	
	/// <summary>
	/// Enumerate the Users columns.
	/// </summary>
	[Serializable]
	public enum UsersColumn : int
	{
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ID = 1,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("User Name")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		UserName = 2,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Password = 3,
		/// <summary>
		/// Last_Login : 
		/// </summary>
		[EnumTextValue("Last Login")]
		[ColumnEnum("Last_Login", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Last_Login = 4,
		/// <summary>
		/// Last_Logout : 
		/// </summary>
		[EnumTextValue("Last Logout")]
		[ColumnEnum("Last_Logout", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Last_Logout = 5,
		/// <summary>
		/// Is_Online : 
		/// </summary>
		[EnumTextValue("Is Online")]
		[ColumnEnum("Is_Online", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Is_Online = 6,
		/// <summary>
		/// Is_Active : 
		/// </summary>
		[EnumTextValue("Is Active")]
		[ColumnEnum("Is_Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Is_Active = 7,
		/// <summary>
		/// Is_Admin : 
		/// </summary>
		[EnumTextValue("Is Admin")]
		[ColumnEnum("Is_Admin", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Is_Admin = 8,
		/// <summary>
		/// UserType_ID : 
		/// </summary>
		[EnumTextValue("User TypeID")]
		[ColumnEnum("UserType_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserType_ID = 9,
		/// <summary>
		/// First_Name : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("First_Name", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		First_Name = 10,
		/// <summary>
		/// Last_Name : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("Last_Name", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Last_Name = 11,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Email = 12,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Country = 13,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		City = 14,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Address = 15,
		/// <summary>
		/// Mobile : 
		/// </summary>
		[EnumTextValue("Mobile")]
		[ColumnEnum("Mobile", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Mobile = 16,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Phone = 17,
		/// <summary>
		/// Postion : 
		/// </summary>
		[EnumTextValue("Postion")]
		[ColumnEnum("Postion", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Postion = 18,
		/// <summary>
		/// Is_Deleted : 
		/// </summary>
		[EnumTextValue("Is Deleted")]
		[ColumnEnum("Is_Deleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Is_Deleted = 19,
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		[EnumTextValue("Created On")]
		[ColumnEnum("CreatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedOn = 20,
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		[EnumTextValue("Created By")]
		[ColumnEnum("CreatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CreatedBy = 21,
		/// <summary>
		/// UpdatedOn : 
		/// </summary>
		[EnumTextValue("Updated On")]
		[ColumnEnum("UpdatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedOn = 22,
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		[EnumTextValue("Updated By")]
		[ColumnEnum("UpdatedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdatedBy = 23,
		/// <summary>
		/// DeletedOn : 
		/// </summary>
		[EnumTextValue("Deleted On")]
		[ColumnEnum("DeletedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeletedOn = 24,
		/// <summary>
		/// DeletedBy : 
		/// </summary>
		[EnumTextValue("Deleted By")]
		[ColumnEnum("DeletedBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DeletedBy = 25
	}//End enum

	#endregion UsersColumn Enum

} // end namespace
